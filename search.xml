<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux使用</title>
    <url>/2023/02/18/2019-07-18-Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h5 id="一、linux系统启动"><a href="#一、linux系统启动" class="headerlink" title="一、linux系统启动"></a>一、linux系统启动</h5><ol>
<li><p>修改root用户密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li>
<li><p>停机和关机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -H		停机</span><br><span class="line">shutdown -P 	关机（断电）</span><br><span class="line">shutdown -r 	重启</span><br><span class="line">shutdown -h		相当于 -P ，除非指定  -H</span><br><span class="line">shutdown [options] [time] 在指定时间执行操作</span><br><span class="line">shutdown -h now   马上关机</span><br><span class="line">shutdown -h +n    在 n 分钟后关机</span><br><span class="line">shutdown -h 13:14  在今天 13:14 关机</span><br><span class="line"></span><br><span class="line">shutdown -k		只发送 wall message</span><br><span class="line">shutdown -c		取消 shutdown 命令 执行</span><br><span class="line">shutdown --no-wall 执行 shutdown 命令前不发送 wall message</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="二、linux系统目录结构"><a href="#二、linux系统目录结构" class="headerlink" title="二、linux系统目录结构"></a>二、linux系统目录结构</h5><ol>
<li><p>输入 ls -/  命令查看目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin  boot  dev  etc  home  init  lib  lib64  media  mnt  opt  proc  root  run  sbin  snap  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure></li>
<li><p>目录结构的作用和含义</p>
<ul>
<li>/bin 存放常用的命令，如 cat、chmod、cp 等</li>
<li>/boot 存放启动linux需要的核心文件</li>
<li>/dev 存放linux的外部设备</li>
<li>/etc 存放系统管理需要的配置文件和子目录</li>
<li>/home 用户主目录，以用户名命名，如 /codecho</li>
<li>/lib 存放系统最基本的动态链接共享库，作用和windows中的DLL文件类似，几乎每个程序都使用到这些共享库</li>
<li>/lost+found 一般为空，当系统非法关机后，该目录存放一些<em><strong>“孤儿？？？”</strong></em>文件</li>
<li>/media linux识别设备后将其挂载到此目录</li>
<li>/mnt 系统临时挂载点</li>
<li>/opt 存放安装的第三方软件</li>
<li>/proc 虚拟的文件系统，非真实存在，记录和系统相关的信息</li>
<li>/root <em><strong>root</strong></em>用户主目录</li>
<li>/sbin 存放<em><strong>root</strong></em>用户使用的命令</li>
<li>/srv 存放一些服务启动后需要的数据</li>
<li>/sys 也是一个虚拟的文件系统，是对linux系统下所有设备的映射</li>
<li>/tmp 存放临时文件</li>
<li>/usr 存放用户的程序和文件</li>
<li>/usr/bin 存放一般的应用程序</li>
<li>/usr/sbin 存放<em><strong>root</strong></em>用户使用的应用程序</li>
<li>/usr/src 存放linux内核源码</li>
<li>/var 存放经常会变化的文件，比如系统的日志</li>
<li>/run 存放系统启动后的信息，重启时清空</li>
</ul>
</li>
</ol>
<h5 id="三、linux文件基本属性"><a href="#三、linux文件基本属性" class="headerlink" title="三、linux文件基本属性"></a>三、linux文件基本属性</h5><ol>
<li><p>使用 ls -l 或 ll 命令显示文件/文件夹的属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x  23 root root      4096 Jan 25 19:47 ./</span><br><span class="line">drwxr-xr-x  23 root root      4096 Jan 25 19:47 ../</span><br><span class="line">drwxr-xr-x   2 root root      4096 Jan 25 17:23 bin/</span><br><span class="line">drwxr-xr-x   3 root root      4096 Dec 12  2018 boot/</span><br><span class="line">drwxr-xr-x  18 root root      3740 Jan 25 16:29 dev/</span><br><span class="line">drwxr-xr-x  91 root root      4096 Jul 19 09:49 etc/</span><br><span class="line">drwxr-xr-x   3 root root      4096 Dec 26  2018 home/</span><br><span class="line">lrwxrwxrwx   1 root root        33 Dec 12  2018 initrd.img -&gt; boot/initrd.img-4.15.0-42-generic</span><br><span class="line">lrwxrwxrwx   1 root root        33 Dec 12  2018 initrd.img.old -&gt; boot/initrd.img-4.15.0-20-generic</span><br><span class="line">drwxr-xr-x  19 root root      4096 Dec 12  2018 lib/</span><br><span class="line">drwxr-xr-x   2 root root      4096 Jan 25 17:22 lib64/</span><br><span class="line">drwx------   2 root root     16384 Dec 12  2018 lost+found/</span><br><span class="line">drwxr-xr-x   4 root root      4096 Dec 12  2018 media/</span><br><span class="line">drwxr-xr-x   2 root root      4096 Apr 27  2018 mnt/</span><br><span class="line">drwxr-xr-x   3 root root      4096 Dec 27  2018 opt/</span><br><span class="line">dr-xr-xr-x 134 root root         0 Jan 25 16:29 proc/</span><br><span class="line">drwx------  11 root root      4096 Jul 16 20:19 root/</span><br><span class="line">drwxr-xr-x  25 root root       800 Jul 19 09:09 run/</span><br><span class="line">drwxr-xr-x   2 root root      4096 Dec 27  2018 sbin/</span><br><span class="line">drwxr-xr-x   2 root root      4096 Apr 27  2018 srv/</span><br><span class="line">-rw-------   1 root root 993249280 Dec 12  2018 swapfile</span><br><span class="line">dr-xr-xr-x  13 root root         0 Jan 26 00:29 sys/</span><br><span class="line">drwxr-xr-x   3 root root      4096 Jan 25 19:47 <span class="built_in">test</span>/</span><br><span class="line">drwxrwxrwt  22 root root      4096 Jul 19 10:58 tmp/</span><br><span class="line">drwxr-xr-x  12 root root      4096 Jan 25 18:36 usr/</span><br><span class="line">drwxr-xr-x  12 root root      4096 Jun 18 15:40 var/</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个字符为 <em><strong>d</strong></em> 时，表示是目录</li>
<li>第一个字符为 <em><strong>-</strong></em> 时，表示是文件</li>
<li>第一个字符为 <em><strong>l</strong></em> 时，表示是链接文件</li>
<li>第一个字符为 <em><strong>b</strong></em> 时，表示是装置文件里面的可供储存的接口设备(可随机存取装置)</li>
<li>第一个字符是 <em><strong>c</strong></em> 时，表示是装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)</li>
</ul>
<ul>
<li>rwx rwx rwx 分别表示 文件所有者(owner) 、所有者同组用户(group)、其他用户(others) 拥有该文件的权限</li>
<li>r 表示读权限，- 表示没有读权限</li>
<li>w 表示写权限，- 表示没有写权限</li>
<li>x 表示执行权限，- 表示没有执行权限</li>
<li><strong>特殊情况：</strong> t 表示 sticky bit ，可以理解为 防删除位，一般用在目录上，如 /temp 目录，用户只能删除自己的文件，不能删除其他用户的文件</li>
</ul>
</li>
<li><p>更改文件属性的命令</p>
<ul>
<li> chgrp：更改文件所属的用户组 -R 表示递归更改所属的用户组，更改某个目录下的所有文件的所属的用户组</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 所属的用户组 文件/目录</span><br></pre></td></tr></table></figure>

<ul>
<li><p>chown：更改文件所属用户，也可以同时更改文件的所属的用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown [-R] 所属的用户 文件/目录</span><br><span class="line">chown [-R] 所属的用户:所属的用户组 文件/目录</span><br></pre></td></tr></table></figure></li>
<li><p>chmod：更改文件的9个属性 其中 xyz 表示三个权限的数字之和，如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----------------使用数字改变文件的权限-----------------</span><br><span class="line">chmod [-R] xyz 文件/目录</span><br><span class="line">各权限代表的数字：r=4 w=2 x=1 -=0(没有权限则为0)</span><br><span class="line">x: [r+w+x] = [4+2+1] --&gt; 7  表示 owner 所拥有的权限</span><br><span class="line">y: [r+w+x] = [4+2+1] --&gt; 7  表示 group 所拥有的的权限</span><br><span class="line">z: [r+w+x] = [4+2+1] --&gt; 7  表示 others 所拥有的权限</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----------------使用符号改变文件的权限-----------------</span><br><span class="line">将用户分为四种类型：a=all(所有用户) u=user(所属用户) g=group(所属用户组) o=others(其他用户)</span><br><span class="line">将操作分为 +(添加) -(去除) =(设置)</span><br><span class="line">chmod u=rw,g=wx,o=x test.txt 将test.txt文件的权限设为rw--wx--x </span><br><span class="line">chmod a-w test.txt 去除所有用户对test.txt文件的写权限</span><br><span class="line">chmod a+x test.txt 添加所有用户对test.txt文件的执行权限</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="四、linux文件与目录的操作"><a href="#四、linux文件与目录的操作" class="headerlink" title="四、linux文件与目录的操作"></a>四、linux文件与目录的操作</h5><ol>
<li><p>linux根目录：/</p>
</li>
<li><p>文件/目录的常用操作命令</p>
<ul>
<li><p>ls：列出目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a 列出所有的文件/目录，包括以 . 开头的文件</span><br><span class="line">ls -d 列出目录本身，不包括其内容</span><br><span class="line">ls -l 列出所有详细信息，包括权限、日期、所属用户等</span><br></pre></td></tr></table></figure></li>
<li><p>cd：切换目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [绝对路径/相对路径] </span><br><span class="line"><span class="built_in">cd</span> / 切换到根目录</span><br><span class="line"><span class="built_in">cd</span> .. 返回当前目录的上一级目录</span><br></pre></td></tr></table></figure></li>
<li><p>pwd：显示当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>	显示当前目录</span><br></pre></td></tr></table></figure></li>
<li><p>mkdir：创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -m xyz 目录名 创建目录时同时设置目录的权限，如 mkdir -m 777 <span class="built_in">test</span></span><br><span class="line">mkdir -p 目录1/目录2/目录3 递归创建多级目录，如 test1/hello/world </span><br></pre></td></tr></table></figure></li>
<li><p>rmdir：删除<em><strong>空目录</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir -p 目录1/目录2/目录3 连带其上级目录一起删除</span><br></pre></td></tr></table></figure></li>
<li><p>cp：复制文件/目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp [options] <span class="built_in">source</span> dest</span><br><span class="line">cp -r <span class="built_in">test</span> test1/test2 递归复制</span><br></pre></td></tr></table></figure></li>
<li><p>rm：删除目录或文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件/目录</span><br><span class="line">rm -f 文件/目录 直接删除文件/目录，没有警告信息</span><br><span class="line">rm -i 文件/目录，删除前显示警告</span><br><span class="line">rm -r 文件/目录，递归删除</span><br></pre></td></tr></table></figure></li>
<li><p>mv：移动目录/文件，或者修改名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv [-<span class="keyword">fi</span>] <span class="built_in">source</span> dest</span><br><span class="line">mv -f <span class="built_in">source</span> dest 若目标文件存在，直接覆盖</span><br><span class="line">mv -i <span class="built_in">source</span> dest 若目标文件存在，询问是否覆盖</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>linux文件内容查看</p>
<ul>
<li><p>cat：从第一行开始显示内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat -b test.txt 列出行号，空白行不显示行号</span><br><span class="line">cat -n test.txt 列出行号，空白行也显示行号</span><br><span class="line">cat -E test.txt 显示结尾的断行字节 &amp; </span><br><span class="line">cat -T test.txt 将 tab 制表符显示为 ^|</span><br></pre></td></tr></table></figure></li>
<li><p>tac：从最后一行开始显示内容，和 cat 相反</p>
</li>
<li><p>tail：显示文件最后 n 行内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件名 number 为要显示的行数</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="五、linux用户和用户组管理"><a href="#五、linux用户和用户组管理" class="headerlink" title="五、linux用户和用户组管理"></a>五、linux用户和用户组管理</h5><ol>
<li><p>添加用户账号</p>
<ul>
<li><p>useradd [options] 用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo useradd -d /home/pain -m pain</span><br><span class="line">-d 指定用户主目录 </span><br><span class="line">-m 如果主目录不存在则创建 </span><br><span class="line">-g 指定用户所属用户组</span><br><span class="line">-G 指定用户所属的附加组</span><br><span class="line">-s 指定用户登录shell</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>设置用户账号密码</p>
<ul>
<li><p>passwd [options] 账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-l 锁定账号</span><br><span class="line">-e 强制账号密码过期</span><br><span class="line">-d 强制删除账号密码</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除用户账号</p>
<ul>
<li><p>userdel [options] 账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel -r pain </span><br><span class="line">-r 将账号的主目录也删除</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改用户账号</p>
<ul>
<li><p>usermod [options] 账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -s /bin/hello -d /home/hello -g <span class="built_in">test</span> pain</span><br><span class="line">-s 指定新的登录shell</span><br><span class="line">-d 指定新的用户主目录</span><br><span class="line">-g 指定新的用户组</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>添加用户组</p>
<ul>
<li><p>groupadd [options] 用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-g GID 指定用户组的id</span><br><span class="line">-o 表示新用户组的id可以和已有用户组的id相同</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除用户组</p>
<ul>
<li>groupdel 用户组</li>
</ul>
</li>
<li><p>修改用户组</p>
<ul>
<li><p>groupmod [options] 用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -g 102 group2</span><br><span class="line">将group2的用户组id改为102</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>切换用户组（前提是该用户属于要切换的用户组）</p>
<ul>
<li>newgrp 要切换的用户组</li>
</ul>
</li>
</ol>
<h5 id="六、linux磁盘管理"><a href="#六、linux磁盘管理" class="headerlink" title="六、linux磁盘管理"></a>六、linux磁盘管理</h5><ol>
<li><p>df：查看文件系统的整体磁盘空间使用量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df [options] 目录/文件</span><br><span class="line">-a 列出所有的文件系统</span><br><span class="line">-T 显示文件系统类型</span><br></pre></td></tr></table></figure></li>
<li><p>du：查看文件和目录的磁盘使用空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du [options] 文件/目录</span><br><span class="line">-a 列出所有的文件与目录容量</span><br><span class="line">-h 以易读的方式显示</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="七、linux-vi-vim"><a href="#七、linux-vi-vim" class="headerlink" title="七、linux vi/vim"></a>七、linux vi/vim</h5><ol>
<li><p>vi/vim主要分为三种模式：命令行模式、编辑模式、底部命令行模式</p>
<ul>
<li><p>命令行模式：此时用户输入会被识别为命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i 切换到编辑模式</span><br><span class="line">x 删除光标所在位置的字符</span><br><span class="line">: 切换到底部命令行模式</span><br></pre></td></tr></table></figure></li>
<li><p>编辑模式：可以输入内容编辑文件，按下 esc ，退出编辑模式</p>
</li>
<li><p>底部命令行模式：输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">q 退出</span><br><span class="line">w 保存</span><br><span class="line">wq 保存退出</span><br><span class="line">q! 不保存退出</span><br></pre></td></tr></table></figure></li>
<li><p>常用按键：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">—————————————底部命令行使用的复制粘贴、搜索替换等操作—————————————</span><br><span class="line">/key 寻找光标后方的名为 key 的字符串</span><br><span class="line">?key 寻找光标前方的名为 key 的字符串</span><br><span class="line">n 重复上一个寻找的操作，如执行 /key 寻找光标后方的名为 key 的字符串，按下 n 继续向光标后方寻找</span><br><span class="line">N 反向重复上一个寻找的操作，如上，按下 N 向光标前方寻找</span><br><span class="line">:n1,n2s/key1/key2/g 在n1行到n2行之间寻找名为key1的字符串，并将其替换为key2</span><br><span class="line">:1,<span class="variable">$s</span>/key1/key2/g 从第一行到最后一行之间寻找key1的字符串，并将其替换为key2</span><br><span class="line">:<span class="variable">$s</span>/word1/word2/g 同上，写法不同</span><br><span class="line">:1,<span class="variable">$s</span>/key1/key2/gc 从第一行到最后一行之间寻找key1的字符串，并将其替换为key2，取代之前会有提示信息，让用户确认是否替换</span><br><span class="line">:<span class="variable">$s</span>/word1/word2/gc 同上，写法不同</span><br><span class="line">dd 删除光标所在的一整行</span><br><span class="line">nx 连续向后删除 n 个字符</span><br><span class="line">ndd 删除光标后方的 n 行</span><br><span class="line">d$ 删除光标到该行最后一个字符</span><br><span class="line">d0 删除光标到改行第一个字符</span><br><span class="line">yy 复制光标所在行的内容</span><br><span class="line">nyy 复制光标后方的 n 行内容</span><br><span class="line">y$ 复制光标到该行最后一个字符</span><br><span class="line">y0 复制光标到该行第一个字符</span><br><span class="line">p,P p 将复制的内容粘贴到光标的下一行， P 将复制的内容粘贴到光标的上一行</span><br><span class="line">c 重复删除多个数据，如 10cj 删除光标下方10行</span><br><span class="line">u 复原前一个动作</span><br><span class="line">ctrl+r 重做前一个动作</span><br><span class="line"></span><br><span class="line">—————————————底部命令行模式切换到编辑模式的操作—————————————</span><br><span class="line">i,I i 从光标处输入 I 从光标所在行第一个非空格符处输入</span><br><span class="line">a,A a 从光标处的下一个字符处输入 A 从光标所在行最后一个字符处输入</span><br><span class="line">o,O o 从光标处的下一行输入 O 从光标处的上一行输入</span><br><span class="line"></span><br><span class="line">—————————————编辑模式切换到底部命令行模式的操作—————————————</span><br><span class="line">ESC 从编辑模式退出到底部命令行模式</span><br><span class="line"></span><br><span class="line">—————————————底部命令行模式切换到命令行模式的操作—————————————</span><br><span class="line">:w 保存内容</span><br><span class="line">:w! 强制保存</span><br><span class="line">:q 不保存退出</span><br><span class="line">:q! 强制不保存退出</span><br><span class="line">:wq 保存并退出</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="八、linux-yum命令"><a href="#八、linux-yum命令" class="headerlink" title="八、linux yum命令"></a>八、linux yum命令</h5><ol>
<li><p>yum：查找、安装、删除软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum [options] [<span class="built_in">command</span>] [package]</span><br><span class="line">-y 安装过程选择 yes</span><br><span class="line">-q 不显示安装过程</span><br><span class="line"><span class="built_in">command</span> 要执行的命令</span><br><span class="line">package 软件包</span><br><span class="line"></span><br><span class="line">yum check-update 列出可更新的软件</span><br><span class="line">yum update 更新所有软件</span><br><span class="line">yum list 列出可安装的软件</span><br><span class="line">yum install package 安装指定的软件</span><br><span class="line">yum update package 更新指定的软件</span><br><span class="line">yum remove package 删除指定的软件</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="九、Shell脚本"><a href="#九、Shell脚本" class="headerlink" title="九、Shell脚本"></a>九、Shell脚本</h5><ol>
<li><p>shell：一种应用程序，它是用户和linux内核之间的桥梁，用户通过shell来间接地使用内核</p>
</li>
<li><p>shell脚本：一种为shell编写的脚本程序</p>
</li>
<li><p>shell的分类：</p>
<ul>
<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>
<li>Bourne Again Shell（/bin/bash）是linux的默认shell</li>
<li>C Shell（/usr/bin/csh）</li>
<li>K Shell（/usr/bin/ksh）</li>
<li>Shell for Root（/sbin/sh）</li>
</ul>
</li>
<li><p>查看系统可用的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/usr/bin/screen</span><br></pre></td></tr></table></figure></li>
<li><p>查看当前系统的默认shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure></li>
<li><p>编写一个简单的shell脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world,this is a shell script&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./helloworld.sh		注意要在shell脚本所在目录</span><br><span class="line">hello world,this is a shell script</span><br><span class="line"></span><br><span class="line">/bin/sh helloworld.sh	</span><br><span class="line">hello world,this is a shell script</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="十、linux命令（经常使用的）"><a href="#十、linux命令（经常使用的）" class="headerlink" title="十、linux命令（经常使用的）"></a>十、linux命令（经常使用的）</h5><ol>
<li><p>文件管理</p>
<ul>
<li><p>cat [options] filename</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n | --number	从1开始对输出的行数编号</span><br><span class="line">-b | --number-nonblank	和-n相似，但是对空白行不编号</span><br><span class="line">-s | --squeeze-blank	连续两行以上空白行，替换为一行空白行</span><br><span class="line">-E | --show-ends	在每行结束处显示 $ </span><br><span class="line">-T | --show-tabs	将 TAB 符显示为 ^|</span><br><span class="line"></span><br><span class="line">cat test1.txt	显示test1.txt中的内容</span><br><span class="line">cat test1.txt test2.txt		同时显示test1.txt和test2.txt中的内容</span><br><span class="line">cat test1.txt test2.txt &gt; test3.txt	将test1.txt和test2.txt中的内容写到test3.txt中</span><br><span class="line">cat /dev/null &gt; test4.txt	将test4中的内容清空</span><br><span class="line"></span><br><span class="line">/dev/null 是一个特殊的设备文件，它丢弃一切写入其中的数据（报告写入成功），读取它则会立即得到一个 EOF</span><br></pre></td></tr></table></figure></li>
<li><p>chgrp：参考 三</p>
</li>
<li><p>chmod：同上</p>
</li>
<li><p>chown：同上</p>
</li>
<li><p>find path [options]，命令行上第一个 -(),! 之前的部分为path，后面的是expression，如果path为空字符串，使用当前路径，如果expression为空字符串，使用-print为预设expression</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;.txt&quot;</span>		在当前目录查找所有以 .txt 结尾的文件</span><br><span class="line">find . -iname <span class="string">&quot;T*&quot;</span>		查找文件名满足T*的文件，忽略大小写</span><br><span class="line">find . -cmin +10		查找修改时间超过10分钟的文件</span><br><span class="line">find . -amin +10		查找超过10分钟内被访问的文件</span><br><span class="line">find . -newer test3.txt	查找比test3.txt文件修改时间更晚的文件</span><br><span class="line">find . -anewer test3.txt	查找比test3.txt文件更晚被读取的文件</span><br><span class="line">find . -<span class="built_in">type</span> c		查找文件类型是 c 的文件</span><br><span class="line">c的取值</span><br><span class="line">	d	目录</span><br><span class="line">	l	符号链接</span><br><span class="line">	f	普通文件</span><br><span class="line">	c	字符设备</span><br><span class="line">	b	块设备</span><br><span class="line">	s	套接字</span><br></pre></td></tr></table></figure></li>
<li><p>mv：参考 三</p>
</li>
<li><p>rm：同上</p>
</li>
<li><p>tee  [-ai][file]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tee test1.txt -a	读取用户输入的内容，将其输出到test1.txt文件中</span><br><span class="line">-a | --append		附加到文件后面，而非覆盖</span><br><span class="line">-i | --ignore-interrupts	忽略中断信号</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2023/02/18/2019-11-21-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<ol>
<li><p>介绍</p>
<blockquote>
<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<p>如：</p>
<ul>
<li>abc*d：可以匹配abd、abcd、abccd等，*表示它前面的字符出现零次或多次，所以可以匹配没有c字符、有一个或多个c字符的字符串</li>
<li>abc+d：可以匹配abcd、abccd、abcccd等，+表示它前面的字符出现至少一次，所以可以匹配有一个c字符、有多个c字符的字符串</li>
</ul>
</blockquote>
</li>
<li><p>普通字符和非打印字符参考<a href="https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html">W3C正则表达式教程</a></p>
</li>
<li><p>元字符：</p>
<ul>
<li>(pattern)：匹配该pattern并获取匹配结果，获取的匹配可以从产生的Matches集合得到</li>
<li>(?:pattern)：匹配该pattern但不获取匹配结果，这是一个非获取匹配，即不进行存储供以后使用，如<code>&#39;industr(?:y|ies)</code> 就是一个比 <code>&#39;industry|industries&#39;</code> 更简略的表达式</li>
<li>(?=pattern)：正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，这是一个非获取匹配，即不进行存储供以后使用，如<code>&quot;Windows(?=95|98|NT|2000)&quot;</code>能匹配<code>&quot;Windows2000&quot;</code>中的”Windows”，但不能匹配<code>&quot;Windows3.1&quot;</code>中的”Windows”</li>
<li>(?!pattern)：正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，这是一个非获取匹配，即不进行存储供以后使用，如<code>&quot;Windows(?!95|98|NT|2000)&quot;</code>能匹配<code>&quot;Windows3.1&quot;</code>中的”Windows”，但不能匹配<code>&quot;Windows2000&quot;</code>中的”Windows”</li>
<li>(?&lt;=pattern)：反向肯定预查，与正向肯定预查类似，只是方向相反，如”<code>(?&lt;=95|98|NT|2000)Windows</code>“能匹配”<code>2000Windows</code>“中的”<code>Windows</code>“，但不能匹配”<code>3.1Windows</code>“中的”<code>Windows</code>“</li>
<li>(?&lt;!pattern)：反向否定预查，与正向否定预查类似，只是方向相反，如”<code>(?&lt;!95|98|NT|2000)Windows</code>“能匹配”<code>3.1Windows</code>“中的”<code>Windows</code>“，但不能匹配”<code>2000Windows</code>“中的”<code>Windows</code>“</li>
<li>x|y：匹配x或y，如<code>&#39;a|b&#39;</code>匹配<code>&#39;a&#39;</code>或<code>&#39;b&#39;</code>，<code>&#39;(a|b)c&#39;</code>匹配<code>&#39;ac&#39;</code>或<code>&#39;bc&#39;</code></li>
<li>[xyz]：字符集合，匹配[]包含的任意字符，如<code>&#39;[abc]&#39;</code>匹配<code>&#39;abcde&#39;</code>中的a、b、c</li>
<li>[^xyz]：负值字符集合，匹配[]未包含的任意字符，如<code>&#39;[^abc]&#39;</code>匹配<code>&#39;abcde&#39;</code>中的d、e</li>
<li>[a-z]：字符范围，匹配指定范围内的任意字符，如<code>&#39;[a-z]&#39;</code>匹配<code>&#39;a&#39;</code>~`’z’<code>范围内的任意小写字母，</code>[A-Z]`同理</li>
<li>[^a-z]：负值字符范围，匹配不在指定范围内的任意字符，如<code>&#39;[^a-z]&#39;</code>匹配不在<code>&#39;a&#39;</code>~`’z’<code>范围内的任意字符，</code>‘[^A-Z]’`同理</li>
<li>\cx：匹配由x指明的控制字符，如<code>&#39;\cM&#39;</code>匹配一个Control-M或回车符，x的值必须为a-z或A-Z之一，否则将c视为一个原义的<code>&#39;c&#39;</code>字符</li>
<li>\d：匹配一个数字字符，等价于<code>&#39;[0-9]&#39;</code></li>
<li>\D：匹配一个非数字字符，等价于<code>&#39;[^0-9]&#39;</code></li>
<li>\f：匹配一个换页符，等价于<code>&#39;\x0c&#39;</code>和<code>&#39;\cL&#39;</code></li>
<li>\n：匹配一个换行符，等价于<code>&#39;\x0a&#39;</code>和<code>&#39;\cJ&#39;</code></li>
<li>\r：匹配一个回车符，等价于<code>&#39;\x0d&#39;</code>和<code>&#39;\cM&#39;</code></li>
<li>\s：匹配任何空白符，包括空格、制表符、换页符等，等价于<code>&#39;[ \f\n\r\t\v]&#39;</code></li>
<li>\S：匹配任何非空白符，等价于<code>&#39;[^ \f\n\r\t\v]&#39;</code></li>
<li>\t：匹配一个制表符，等价于<code>&#39;\x09&#39;</code> 和 <code>&#39;\cI&#39;</code></li>
<li>\v：匹配一个垂直制表符，等价于<code>&#39;\x0b&#39;</code> 和 <code>&#39;\cK&#39;</code></li>
<li>\w：匹配字母、数字、下划线，等价于<code>&#39;[A-Za-z0-9_]&#39;</code></li>
<li>\W：匹配非字母、数字、下划线，等价于<code>&#39;[^A-Za-z0-9]&#39;</code></li>
</ul>
</li>
<li><p>特殊字符：有特殊含义的字符，比如*、+、?等</p>
<ul>
<li>^：匹配字符串开始位置，如<code>&#39;^abc&#39;</code>匹配abc开头的字符串，；如果在方括号表达式中使用，表示不接受后面的字符，如<code>&#39;[^abc]&#39;</code>匹配a、b、c之外的字符；如果要匹配字符本身，使用<code>&#39;\^&#39;</code>进行转义</li>
<li>$：匹配字符串结束位置；如果设置了RegExp 对象的 Multiline 属性，也可以匹配<code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code>；如果要匹配字符本身，使用<code>&#39;\$&#39;</code>进行转义</li>
<li>()：标记一个子表达式的开始和结束位置；子表达式可以获取供以后使用；如果要匹配字符本身，使用<code>&#39;\(&#39;</code>或<code>&#39;\)&#39;</code>进行转义</li>
<li>*：匹配前面的子表达式<strong>零次或多次</strong>；如果要匹配字符本身，使用<code>&#39;\*&#39;</code>进行转义</li>
<li>+：匹配前面的子表达式<strong>一次或多次（至少一次）</strong>；如果要匹配字符本身，使用<code>&#39;\+&#39;</code>进行转义</li>
<li>?：匹配前面的子表达式<strong>零次或一次（最多一次）</strong>；指明一个非贪婪限定符；如果要匹配字符本身，使用<code>&#39;\?&#39;</code>进行转义</li>
<li>.：匹配除换行符<code>&#39;\n&#39;</code>之外的任何<strong>单字符</strong>，如果要匹配字符本身，使用<code>&#39;\.&#39;</code>进行转义</li>
<li>[：标记方括号表达式；如果要匹配字符本身，使用<code>&#39;\[&#39;</code>进行转义</li>
<li>\：将下一个字符标记为特殊字符、原义字符、向后引用、八进制转义符，如<code>&#39;\n&#39;</code>匹配换行符，<code>&#39;\\&#39;</code>匹配<code>&#39;\&#39;</code></li>
<li>{：标记限定符表达式开始位置；如果要匹配字符本身，使用<code>&#39;\&#123;&#39;</code>进行转义</li>
<li>|：指明两项之间的一个选择；如果要匹配字符本身，使用<code>&#39;\|&#39;</code>进行转义</li>
</ul>
</li>
<li><p>限定符：限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种，下面只介绍 <strong>{n}</strong> 、 <strong>{n,}</strong> 、 <strong>{n,m}</strong> </p>
<ul>
<li>{n}：n为非负整数，表示确切匹配n次，如<code>abc&#123;3&#125;</code>匹配<code>&#39;abccc&#39;</code>，不匹配<code>&#39;abcc&#39;</code></li>
<li>{n,}：n为非负整数，表示至少匹配n次，如<code>&#39;abc&#123;3,&#125;&#39;</code>匹配<code>&#39;abcccc&#39;</code>中的所有c</li>
<li>{n,m}：n和m均为非负整数，且n&lt;=m，表示最少匹配n次，最多匹配m次，如<code>&#39;abc&#123;1,3&#125;&#39;</code>匹配<code>&#39;abcccc&#39;</code>中的前三个c</li>
</ul>
</li>
<li><p>贪婪和非贪婪：*、+ 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。</p>
</li>
<li><p>定位符：定位符能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p>
<ul>
<li>^：匹配字符串开始的位置；如果设置了RegExp 对象的 Multiline 属性，<code>&#39;^&#39;</code>还会和<code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code>之后的位置匹配</li>
<li>$：匹配字符串结束的位置；如果设置了RegExp 对象的 Multiline 属性，<code>&#39;$&#39;</code>还会和<code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code>之前的位置匹配</li>
<li>\b：匹配一个单词边界，即单词和空格之间的位置</li>
<li>\B：匹配一个非单词边界</li>
<li><strong>注意：</strong>不能将限定符与定位符一起使用</li>
</ul>
</li>
<li><p>运算符优先级：正则表达式从左到右进行计算，并遵循优先级顺序，相同优先级的从左到右进行运算，不同优先级的运算先高后低，下面按照最高到最低顺序说明</p>
<ul>
<li><p>\：转义符</p>
</li>
<li><p>(), (?:), (?=), []：圆括号和方括号</p>
</li>
<li><p>*, +, ?, {n}, {n,}, {n,m}：限定符</p>
</li>
<li><p>^, $, \任何元字符、任何字符：位置和顺序</p>
</li>
<li><p>|：替换，”或”操作，字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Markdown语法学习</title>
    <url>/2023/02/18/2019-08-31-markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><em><strong>斜粗</strong></em></p>
<p>段落1</p>
<hr>
<p>段落2</p>
<hr>
<p><del>段落3</del></p>
<p><u>hello</u></p>
<p>详情请参考<a href="https://meizu.com/">^官网</a></p>
<ul>
<li>no.1</li>
<li>no.2</li>
</ul>
<ol>
<li>no.1</li>
<li>no.2</li>
</ol>
<ol>
<li>no.1<ul>
<li>hello</li>
</ul>
</li>
<li>no.2<ul>
<li>world</li>
</ul>
</li>
</ol>
<ul>
<li><p>要点1</p>
<blockquote>
<p>细心</p>
<p>诚信</p>
<p>勤奋</p>
</blockquote>
</li>
<li><p>要点2</p>
<blockquote>
<p>能力</p>
<blockquote>
<p>学习能力</p>
<p>解决问题能力</p>
</blockquote>
</blockquote>
</li>
</ul>
<p><a href="hello.com">hello</a></p>
<p>&lt;<a href="http://www.world.com&gt;/">www.world.com&gt;</a></p>
<ul>
<li><p>高级链接</p>
<p><a href="www.jd.com">京东</a></p>
<p><a href="www.taobao.com">淘宝</a></p>
</li>
</ul>
<p><img src="D:\TyporaImg\runoob-logo-1567061411865.png" alt="菜鸟教程"></p>
<table>
<thead>
<tr>
<th>参数名</th>
<th align="center">类型</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td>str</td>
<td align="center">String</td>
<td align="center">要比较的字符串</td>
</tr>
</tbody></table>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 参数名 | 类型 | 含义 |</span><br><span class="line">| --- | :--: | :--: |</span><br><span class="line">| str | String | 要比较的字符串 |</span><br><span class="line"></span><br><span class="line">:- 左对齐</span><br><span class="line">-: 右对齐</span><br><span class="line">:-: 居中对齐</span><br></pre></td></tr></table></figure>



<h5 id="markdown高级技巧"><a href="#markdown高级技巧" class="headerlink" title="markdown高级技巧"></a>markdown高级技巧</h5><blockquote>
<p>部分HTML标签，可以直接在markdown中书写</p>
</blockquote>
<h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><p>使用 <kbd>win</kbd>+<kbd>L</kbd>锁定屏幕</p>
<p><b>这是HTML的b标签</b></p>
<h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><blockquote>
<p>由于markdown使用了很多特殊符号表示格式，因此某些特殊符号的显示需要使用转义字符，markdown使用<em><strong>反斜杠</strong></em>转义字符</p>
</blockquote>
<h6 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h6><p>显示** **</p>
<h5 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h5><p>$$<br>x² + 4 = 20<br>$$</p>
<h5 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h5><p><a href="#test">我来了</a></p>
<hr>
<hr>
<hr>
<hr>
<p><span id="test">到我这里来</span></p>
<ul>
<li>hello<ul>
<li>world<ul>
<li>hh</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 早餐</li>
<li><input checked="" disabled="" type="checkbox"> 无参</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java序列化与反序列化</title>
    <url>/2023/02/18/2020-11-25-Java%20%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<ol>
<li><p>序列化</p>
<ul>
<li><p>概念：</p>
<p>  将Java中的对象转换为字节序列</p>
</li>
<li><p>使用场景：</p>
<p>  如在程序停止运行后，需要将之前的对象状态保存到文件中，在程序重新启动后，可以根据该文件重新读取相应的对象信息（持久化存储）；</p>
<p>  在网络中传输对象</p>
</li>
<li><p>实现方式：</p>
<p>  实现<code>java.io.Serializable</code>接口</p>
</li>
<li><p>注意点：</p>
<p>  基本类型、数组、枚举等也会进行序列化</p>
<p>  transient修饰的属性和静态属性不参与序列化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">and the values of the non-<span class="keyword">transient</span></span><br><span class="line">and non-<span class="keyword">static</span> fields of the <span class="class"><span class="keyword">class</span> <span class="title">and</span> <span class="title">all</span> <span class="title">of</span> <span class="title">its</span> <span class="title">supertypes</span> <span class="title">are</span></span></span><br><span class="line"><span class="class"><span class="title">written</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> (<span class="title">obj</span> <span class="title">instanceof</span> <span class="title">String</span>) </span>&#123;</span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">                cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeArray</span><span class="params">(xxx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ccl.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ccl == Integer.TYPE) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] ia = (<span class="keyword">int</span>[]) array;</span><br><span class="line">            bout.writeInt(ia.length);</span><br><span class="line">            bout.writeInts(ia, <span class="number">0</span>, ia.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Byte.TYPE) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] ba = (<span class="keyword">byte</span>[]) array;</span><br><span class="line">            bout.writeInt(ba.length);</span><br><span class="line">            bout.write(ba, <span class="number">0</span>, ba.length, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Long.TYPE) &#123;</span><br><span class="line">        ......</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>代码实现：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">// 被transient标记的属性不参与序列化，创建对象时赋值18，序列化后重新读取该属性的值为0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 静态属性不参与序列化，序列化后该属性值为null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;number: &quot;</span> + number);</span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .......省略getter、setter方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serializable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">    student.setNumber(<span class="number">36</span>);</span><br><span class="line">    student.setAge(<span class="number">18</span>);</span><br><span class="line">    student.setGender(<span class="string">&quot;female&quot;</span>);</span><br><span class="line">    String greeting = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建FileOutputStream</span></span><br><span class="line">    <span class="comment">// 创建ObjectOutputStream</span></span><br><span class="line">    <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\MyWork\\student.ser&quot;</span>);</span><br><span class="line">         ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos)) &#123;</span><br><span class="line">        <span class="comment">// 将对象写入到文件</span></span><br><span class="line">        oos.writeObject(student);</span><br><span class="line">        oos.writeObject(greeting);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>反序列化</p>
<ul>
<li><p>概念：</p>
<p>  将字节序列转换为Java对象</p>
</li>
<li><p>使用场景</p>
<p>  如在程序停止运行后，需要将之前的对象状态保存到文件中，在程序重新启动后，可以根据该文件重新读取相应的对象信息（持久化存储）</p>
<p>  在网络中传输对象，接收字节序列后重新读取对象信息</p>
</li>
<li><p>注意点：</p>
<p>  必须确保该读取程序的CLASSPATH中包含有序列化类的class文件</p>
</li>
<li><p>代码实现：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deserializable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">null</span>;</span><br><span class="line">    String greeting = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建FileInputStream</span></span><br><span class="line">    <span class="comment">// 创建ObjectInputStream</span></span><br><span class="line">    <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\MyWork\\student.ser&quot;</span>);</span><br><span class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);) &#123;</span><br><span class="line">        <span class="comment">// 从文件读取对象</span></span><br><span class="line">        student = (Student) ois.readObject();</span><br><span class="line">        greeting = (String) ois.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != student) &#123;</span><br><span class="line">        student.showStudent();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">name: 小花</span><br><span class="line">number: <span class="number">36</span></span><br><span class="line">age: <span class="number">0</span></span><br><span class="line">gender: <span class="keyword">null</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>serialVersionUID</p>
<ul>
<li><p>概念：</p>
<p>  序列化版本号，用来标识当前实现序列化接口的类，如果不显式指定，编译器会给类自动生成一个serialVersionUID</p>
</li>
<li><p>作用：</p>
<p>  先看一个场景，在上述（1）中，Student类定义了name、number、age、gender四个属性，然后我们创建一个student对象并将其序列化保存到student.ser文件中，然后我们在Student类中增加一个属性，如className，再通过反序列化读取student.ser文件中的字节信息，转换成student对象，此时程序会报错</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.io.InvalidClassException: com.easyfun.base.Student; local class incompatible: stream classdesc serialVersionUID = -6313947761321746093, local class serialVersionUID = 4891437043098475710</span><br></pre></td></tr></table></figure>

<p>  根据异常信息找到相应的代码：java.io.ObjectStreamClass#initNonProxy，当原class的序列化版本号和当前class的序列化版本号不一致会导致反序列化失败</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initNonProxy</span><span class="params">(xxx)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> suid = Long.valueOf(model.getSerialVersionUID());</span><br><span class="line">	......</span><br><span class="line">        <span class="keyword">if</span> (model.serializable == osc.serializable &amp;&amp;</span><br><span class="line">            !cl.isArray() &amp;&amp;</span><br><span class="line">            suid != osc.getSerialVersionUID()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(osc.name,</span><br><span class="line">                                            <span class="string">&quot;local class incompatible: &quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;stream classdesc serialVersionUID = &quot;</span> + suid +</span><br><span class="line">                                            <span class="string">&quot;, local class serialVersionUID = &quot;</span> +</span><br><span class="line">                                            osc.getSerialVersionUID());</span><br><span class="line">        &#125;        </span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  现在我们在Student类中添加上serialVersionUID（可以通过Idea自动生成，方法可自行搜索），然后调用序列化方法后，在Student类增加一个属性className，然后再调用反序列化方法，发现此次序列化不会再报错了</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6313947761321746093L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">name: 小花</span><br><span class="line">number: <span class="number">36</span></span><br><span class="line">age: <span class="number">0</span></span><br><span class="line">gender: <span class="keyword">null</span></span><br><span class="line">className: <span class="keyword">null</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure>

<p>  因此serialVersionUID的作用就比较好理解了，我们可以显式去指定某个类的序列化版本号，这样我们在反序列化时，即使该类的结构发生了变化，也能保证反序列化能够正常进行</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Mybatis一知半解</title>
    <url>/2023/02/18/2020-11-15-Mybatis%E4%B8%80%E7%9F%A5%E5%8D%8A%E8%A7%A3/</url>
    <content><![CDATA[<ol>
<li><p>mybatis核心类及接口</p>
<ol>
<li><p>Configuration：</p>
<p> mybatis核心配置类，用于管理mybatis相关的配置信息</p>
<p> 当调用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，该方法继续调用mapperProxyFactory.newInstance方法来生成一个具体的代理对象</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, org.apache.ibatis.session.SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known to the MapperRegistry.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SqlSessionFactoryBuilder：</p>
<p> mybatis初始化时，调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的*Mapper.xml文件，构建mybatis运行的核心对象Configuration，然后将其作为参数构建一个SqlSessionFactory对象</p>
<p> 其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder来读取*Mapper，XMLMapperBuilder会使用XMLStatementBuilder来读取和构建所有的SQL语句</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line"><span class="keyword">return</span> build(parser.parse());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SqlSession：</p>
<p> mybatis工作的主要接口，可以通过此接口执行SQL语句、获取mapper、管理事务等；SqlSession的执行，实际是通过对应Executor来进行的</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SqlSessionFactory：</p>
<p> 创建SqlSession的工厂类接口</p>
</li>
<li><p>SqlNode：</p>
<p> sql节点接口，相关实现类：IfSqlNode、TrimSqlNode、ChooseSqlNode、TextSqlNode等</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Executor：</p>
<p> SqlSession的Sql执行，都是委托给Executor实现的，</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Executor</span><br><span class="line">BaseExecutor 									CachingExecutor</span><br><span class="line">SimpleExecutor ReuseExecutor BatchExecutor</span><br></pre></td></tr></table></figure>

<p> 其中，BaseExecutor定义了几个抽象方法，该方法的具体实现交由子类完成</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BaseExecutor.<span class="function">java</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(xxx)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;BatchResult&gt; <span class="title">doFlushStatements</span><span class="params">(xxx)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> &lt;E&gt; List&lt;E&gt; <span class="title">doQuery</span><span class="params">(xxx)</span></span></span><br></pre></td></tr></table></figure>

<p> SimpleExecutor：每次执行update或select时，会开启一个新的Statement对象，执行完立马关闭该对象</p>
<p> ReuseExecutor：每次执行update或select时，先从StatementMap(Map&lt;String,Statement&gt;)中根据sql查找对应的Statement对象，如果存在，直接取出使用，如果不存在，新建一个Statement对象，执行完后不关闭，而是将其放置到StatementMap中</p>
<p> BatchExecutor：执行update时，如果当前要执行的sql和Statement对象和保存的sql和Statement对象不相同，将当前要执行的Statement对象放到StatementList(List<Statement>)中，并保存此次执行的sql和Statement对象</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">        <span class="keyword">if</span> (sql.equals(currentSql) &amp;&amp; ms.equals(currentStatement)) &#123;</span><br><span class="line">            <span class="keyword">int</span> last = statementList.size() - <span class="number">1</span>;</span><br><span class="line">            stmt = statementList.get(last);</span><br><span class="line">            applyTransactionTimeout(stmt);</span><br><span class="line">            handler.parameterize(stmt);<span class="comment">//fix Issues 322</span></span><br><span class="line">            org.apache.ibatis.executor.BatchResult batchResult = batchResultList.get(last);</span><br><span class="line">            batchResult.addParameterObject(parameterObject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Connection connection = getConnection(ms.getStatementLog());</span><br><span class="line">            stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">            handler.parameterize(stmt);    <span class="comment">//fix Issues 322</span></span><br><span class="line">            currentSql = sql;</span><br><span class="line">            currentStatement = ms;</span><br><span class="line">            statementList.add(stmt);</span><br><span class="line">            batchResultList.add(<span class="keyword">new</span> org.apache.ibatis.executor.BatchResult(ms, sql, parameterObject));</span><br><span class="line">        &#125;</span><br><span class="line">	......    </span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 这里没有直接通过statement对象执行SQL操作</span></span><br><span class="line">	handler.batch(stmt);</span><br><span class="line">    <span class="keyword">return</span> BATCH_UPDATE_RETURN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正执行SQL操作是在doFlushStatements方法中进行的，当Executor执行doQuery方法或commit方法（如SqlSession执行commit方法）时，会调用flushStatements方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title">doFlushStatements</span><span class="params">(<span class="keyword">boolean</span> isRollback)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"> 	......</span><br><span class="line">    batchResult.setUpdateCounts(stmt.executeBatch());</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaseExecutor.<span class="function">java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Cannot commit, transaction is already closed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clearLocalCache();</span><br><span class="line">    flushStatements();</span><br><span class="line">    <span class="keyword">if</span> (required) &#123;</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
<li><p>SqlSession、Executor、PerpetualCache层级关系</p>
<ol>
<li><p>SqlSession &lt;&lt;&lt;&lt;&lt;&lt;  Executor &lt;&lt;&lt;&lt;&lt;&lt; PerpetualCache</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> PerpetualCache localCache;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();   </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>mybatis缓存</p>
<ol>
<li><p>mybatis中的缓存功能由根接口<code>Cache</code>定义，整个体系采用装饰器设计模式，数据存储和缓存的基本功能由<code>PerpetualCache</code>永久缓存实现，然后根据一系列的装饰器对<code>PerpetualCache</code>类进行缓存策略等方面的控制</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> The identifier of this cache</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  	<span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">    ......</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FifoCache：先进先出算法，缓存回收策略</span><br><span class="line"></span><br><span class="line">LoggingCache：输出缓存命中的日志信息</span><br><span class="line"></span><br><span class="line">LruCache：最近最少使用算法，缓存回收策略</span><br><span class="line"></span><br><span class="line">ScheduledCache：调度缓存，负责定时清空缓存</span><br><span class="line"></span><br><span class="line">SerializedCache：缓存序列化和反序列化存储</span><br><span class="line"></span><br><span class="line">SoftCache：基于软引用实现的缓存管理策略</span><br><span class="line"></span><br><span class="line">SynchronizedCache：同步的缓存装饰器，用于防止多线程并发访问</span><br><span class="line"></span><br><span class="line">WeakCache：基于弱引用实现的缓存管理策略 </span><br></pre></td></tr></table></figure></li>
<li><p>一级缓存，又叫“本地缓存”，是<code>PerpetualCache</code>类型的永久缓存，位于<code>Executor</code>中，由1可知，Executor又位于<code>SqlSession</code>中，因此，一级缓存的生命周期和SqlSession的生命周期是一致的</p>
</li>
<li><p>二级缓存，又叫“自定义缓存”，实现了<code>Cache</code>接口的类都可以作为二级缓存；二级缓存根据<code>namespace</code>命名空间作为唯一标识，保存在<code>Configuration</code>核心配置对象中；二级缓存默认缓存类型为PerpetualCache，如果配置的缓存为默认类型，则mybatis会根据配置自动追加一系列装饰器</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Map&lt;String, Cache&gt; caches = <span class="keyword">new</span> StrictMap&lt;&gt;(<span class="string">&quot;Caches collection&quot;</span>);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Cache对象之间的引用顺序为：</p>
<p> SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Linux下搭建Redis集群</title>
    <url>/2023/02/18/2022-01-12-Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>操作系统：CentOS 7.5</li>
<li>Redis版本：6.2.6，<a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">链接</a></li>
</ul>
<h3 id="搭建Redis主从集群"><a href="#搭建Redis主从集群" class="headerlink" title="搭建Redis主从集群"></a>搭建Redis主从集群</h3><ul>
<li><p>新建<code>slave1</code>和<code>slave2</code>目录，复制两份redis配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir slave1</span><br><span class="line">mkdir slave2</span><br><span class="line"></span><br><span class="line">cp redis.conf.bak /usr/my_software/redis/slave1/redis.conf</span><br><span class="line">cp redis.conf.bak /usr/my_software/redis/slave2/redis.conf</span><br></pre></td></tr></table></figure>

<p>修改端口号等其他配置，<code>slave2</code>设置类似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> slave1</span><br><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">port 6389</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置pid路径</span></span><br><span class="line">pidfile /var/run/redis_6389.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis.log路径</span></span><br><span class="line">logfile <span class="string">&quot;/usr/my_software/redis/slave1/redis.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置dump.rdb路径</span></span><br><span class="line">dir <span class="string">&quot;/usr/my_software/redis/slave1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主节点</span></span><br><span class="line">replicaof 127.0.0.1 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主节点密码（如果主节点有设置密码）</span></span><br><span class="line">masterauth <span class="string">&quot;codecho@0110&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动<code>slave1</code>和<code>slave2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> slave1</span><br><span class="line">redis-server redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> slave2</span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p>查看主从节点启动情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E6%9F%A5%E7%9C%8Bredis%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9%E5%90%AF%E5%8A%A8%E6%83%85%E5%86%B5.PNG"></p>
</li>
<li><p>连接主节点，使用<code>info</code>命令可以看到主节点现在有两个从节点<code>slave1</code>和<code>slave2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379 [-a 密码]</span><br><span class="line">127.0.0.1:6379&gt; info</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E6%9F%A5%E7%9C%8B%E4%B8%BB%E8%8A%82%E7%82%B9%E6%83%85%E5%86%B5.PNG"></p>
</li>
<li><p>测试主节点和从节点数据同步</p>
<blockquote>
<p>！！！注意！！！从节点只能读数据，无法进行写数据操作</p>
</blockquote>
<p>再开启一个窗口，连接从节点<code>slave1</code>或<code>slave2</code>，通过<code>keys *</code>命令可以发现redis中没有数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6389</span><br><span class="line">127.0.0.1:6389&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<p>在连接主节点的窗口中插入一些数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> today 2022-01-05</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hset student_1001 name xiaoming gender male age 22</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<p>在连接从节点的窗口中重新查询数据，现在从节点也有数据了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6389&gt; keys *</span><br><span class="line">1) <span class="string">&quot;student_1001&quot;</span></span><br><span class="line">2) <span class="string">&quot;today&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>在这种模式下，如果主节点挂掉，我们只能通过手动重新启动主节点，显然，这种情况是我们难以接受的，因此，需要另一种方式来实现主节点的<strong>故障转移，</strong>而哨兵模式就可以做到这一点。</p>
</blockquote>
<h3 id="设置哨兵模式"><a href="#设置哨兵模式" class="headerlink" title="设置哨兵模式"></a>设置哨兵模式</h3><ul>
<li><p>新建<code>sentinel1</code>、<code>sentinel2</code>、<code>sentinel3</code>目录，复制三份sentinel配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir sentinel1</span><br><span class="line">mkdir sentinel2</span><br><span class="line">mkdir sentinel3</span><br><span class="line"></span><br><span class="line">cp sentinel.conf /usr/my_software/redis/sentinel1</span><br><span class="line">cp sentinel.conf /usr/my_software/redis/sentinel2</span><br><span class="line">cp sentinel.conf /usr/my_software/redis/sentinel3</span><br></pre></td></tr></table></figure>

<p>修改端口等信息，<code>sentinel2</code>、<code>sentinel3</code>设置类似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> sentinel1</span><br><span class="line">vim sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置pid路径</span></span><br><span class="line">pidfile /var/run/redis-sentinel1.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置sentinel日志路径</span></span><br><span class="line">logfile <span class="string">&quot;/usr/my_software/redis/sentinel1/sentinel.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">dir <span class="string">&quot;/usr/my_software/redis/sentinel1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="comment"># quorum表示至少有&lt;quorum&gt;个哨兵认定主节点下线（主观下线），这个主节点才真正下线了（客观下线）</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主节点连接密码（如果主节点设置了）</span></span><br><span class="line">sentinel auth-pass mymaster codecho@0110</span><br></pre></td></tr></table></figure></li>
<li><p>启动哨兵</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin</span><br><span class="line">./redis-sentinel /usr/my_software/redis/sentinel1/sentinel.conf</span><br><span class="line">./redis-sentinel /usr/my_software/redis/sentinel2/sentinel.conf</span><br><span class="line">./redis-sentinel /usr/my_software/redis/sentinel3/sentinel.conf</span><br></pre></td></tr></table></figure>

<p>查看<code>sentinel1</code>、<code>sentinel2</code>、<code>sentinel3</code>启动情况</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%90%AF%E5%8A%A8sentinel.PNG"></p>
<p>查看<code>sentinel1</code>日志，可以看到主节点、从节点、其他哨兵节点信息</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E6%9F%A5%E7%9C%8Bsentinel%E6%97%A5%E5%BF%97.PNG"></p>
</li>
<li><p>模拟主节点挂掉的情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 redis主节点pid</span><br></pre></td></tr></table></figure>

<p>查看<code>sentinel1</code>的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f sentinel.log</span><br></pre></td></tr></table></figure>

<p>可以看到，当主节点6379挂掉后，哨兵选举了从节点6399作为新的主节点，并且会更新其他从节点配置文件中的主节点信息</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%93%A8%E5%85%B5%E9%80%89%E4%B8%BE%E4%B8%BB%E8%8A%82%E7%82%B9.PNG"></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E9%80%89%E4%B8%BE%E4%B8%BB%E8%8A%82%E7%82%B9%E5%90%8E%E4%BF%AE%E6%94%B9%E4%BB%8E%E8%8A%82%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.PNG"></p>
</li>
<li><p>重新启动原来的主节点6379</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p>可以看到原来的主节点的配置文件中多了一行<code>replicaof 127.0.0.1 6399</code> ，表示它现在是6399的从节点了</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%8E%9F%E6%9D%A5%E7%9A%84%E4%B8%BB%E8%8A%82%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A2%AB%E6%9B%B4%E6%96%B0.PNG"></p>
<p>也可以用<code>info</code>命令查看从节点信息</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2Finfo%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E4%BB%8E%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF.PNG"></p>
</li>
</ul>
<h3 id="搭建Redis-Cluster"><a href="#搭建Redis-Cluster" class="headerlink" title="搭建Redis Cluster"></a>搭建Redis Cluster</h3><ul>
<li><p>创建cluster目录，在cluster目录中创建6379、6380、6381、6382、6383、6384（每个目录代表一个端口号，可以使用其他端口号）共6个目录，表示一共有6个redis节点（3主3从）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir cluster</span><br><span class="line"><span class="built_in">cd</span> cluster</span><br><span class="line">mkdir 6379 6380 6381 6382 6383 6384</span><br></pre></td></tr></table></figure></li>
<li><p>将redis源码目录中的redis.conf分别复制到上述6个目录下，并修改端口号等信息</p>
<blockquote>
<p>注意，像设置后台运行、pid路径、redis日志文件路径等配置自行参考上节部分按需修改</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改端口号</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启aof</span></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置以集群方式运行</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个集群节点的配置文件，不需要手动创建</span></span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群节点超时，单位：毫秒</span></span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure></li>
<li><p>启动上述6个节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 6379</span><br><span class="line">redis-server redis.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>查看节点是否启动成功</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%90%AF%E5%8A%A86%E4%B8%AA%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9.PNG"></p>
</li>
<li><p>创建真正的集群！！！</p>
<p>对于redis-5及之后的版本，使用<code>redis-cli</code> 命令来创建集群，redis-4.x及之前的版本貌似使用的是<code>redis-trib.rb</code> ，<a href="https://redis.io/topics/cluster-tutorial">可参考官网文档</a></p>
<blockquote>
<p>注意：如果要想在外部通过代码连接集群，这里的ip地址需要换成服务器的公网ip</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">输入yes确认保存配置</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%88%9B%E5%BB%BA%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9B%86%E7%BE%A4.PNG"></p>
</li>
<li><p>更简单快速地创建集群</p>
<p>使用redis源码<code>create-cluster</code>目录下的<code>create-cluster</code>脚本创建集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> utils/create-cluster</span><br><span class="line">./create-cluster start</span><br><span class="line">./create-cluster create</span><br><span class="line"></span><br><span class="line">./create-cluster stop</span><br></pre></td></tr></table></figure>

<p>可以看到<code>create-cluster</code>脚本中端口号是从<code>30000</code>开始的，也是创建6个节点，本质上和上面手动创建是一样的操作</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2Fcreate-cluster%E8%84%9A%E6%9C%AC.PNG"></p>
</li>
<li><p>连接集群并使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 6380</span><br></pre></td></tr></table></figure>

<p>可以看到，我们连接任意一个集群节点，写入的数据会根据key重定向到不同的哈希槽，同样，查询数据时也会从对应的集群节点中获取</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4%E5%B9%B6%E4%BD%BF%E7%94%A8.PNG"></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4%E5%B9%B6%E4%BD%BF%E7%94%A82.PNG"></p>
</li>
<li><p>模拟三个主节点中的一个挂掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 6379主节点的pid</span><br></pre></td></tr></table></figure>

<p>可以看到，<code>6379</code>的从节点<code>6384</code>被选举为新的主节点</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2FRedis%20Cluster%E4%B8%BB%E8%8A%82%E7%82%B9%E6%8C%82%E6%8E%89%E5%90%8E%E9%80%89%E4%B8%BE%E4%BB%8E%E8%8A%82%E7%82%B9%E4%BD%9C%E4%B8%BA%E6%96%B0%E7%9A%84%E4%B8%BB%E8%8A%82%E7%82%B9.PNG"></p>
<p>重新启动<code>6379</code>节点，连接集群后可以看到<code>6379</code>已经变成<code>6384</code>的从节点了</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E5%8E%9F%E6%9D%A5%E7%9A%84%E4%B8%BB%E8%8A%82%E7%82%B9%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%8F%98%E6%88%90%E4%BB%8E%E8%8A%82%E7%82%B9.PNG"></p>
</li>
</ul>
<h3 id="使用Redis工具连接Redis-Cluster"><a href="#使用Redis工具连接Redis-Cluster" class="headerlink" title="使用Redis工具连接Redis Cluster"></a>使用Redis工具连接Redis Cluster</h3><ul>
<li><p>推荐使用<code>AnotherRedisDesktopManager</code>客户端工具，<a href="https://github.com/qishibo/AnotherRedisDesktopManager">github地址</a></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Linux%E4%B8%8B%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%2F%E4%BD%BF%E7%94%A8redis%E5%B7%A5%E5%85%B7%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4.PNG"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Centos安装Redis</title>
    <url>/2023/02/18/2022-01-30-Centos7%E5%AE%89%E8%A3%85Redis/</url>
    <content><![CDATA[<h2 id="Centos7安装Redis-RedisTemplate使用"><a href="#Centos7安装Redis-RedisTemplate使用" class="headerlink" title="Centos7安装Redis + RedisTemplate使用"></a>Centos7安装Redis + RedisTemplate使用</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>操作系统：CentOS7.5</li>
<li>Redis版本：6.2.6，<a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">链接</a></li>
</ul>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li><p>从官网获取Redis压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果速度很慢可以先在windows下下载好压缩包，再通过远程连接工具上传到服务器上</p>
</li>
<li><p>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6.2.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行make命令来编译，需要gcc支持，如果没有需要安装gcc相关工具</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行make install来安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在/usr/local/bin目录下可以看到redis-benchmark、redis-cli、redis-server等相关命令</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redis-server，可以看到Redis的logo</span></span><br><span class="line">./redis-server /usr/my_software/redis/redis-6.2.6/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看redis-server是否成功启动</span></span><br><span class="line">ps -ef|grep redis</span><br><span class="line">root     30570 18113  0 21:30 pts/0    00:00:00 ./redis-server 127.0.0.1:6379</span><br></pre></td></tr></table></figure></li>
<li><p>使用redis-cli连接redis-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6379 [-a 密码]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ping命令查看是否连接成功</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="comment"># 使用info命令查看redis详细信息</span></span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:a1222172bdd35f61</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1127.19.1.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:30570</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:4de193462f2317104a79ee50969de49216991d60</span><br><span class="line">tcp_port:6379</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用set命令保存一个字符串</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> msg Hello,Redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get msg</span><br><span class="line"><span class="string">&quot;Hello,Redis&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改Redis配置文件（推荐先将原始配置文件备份，再做修改）</p>
<ul>
<li>！！！注意！！！在redis-6.2.6版本中，redis配置文件中关于快照部分需要取消save 3600 1、save 300 100、save 60 10000这几行的注释，否则redis不会持久化数据，重启后数据会丢失</li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Centos%E5%AE%89%E8%A3%85Redis%2Fredis-6.0.10%E5%BF%AB%E7%85%A7%E9%85%8D%E7%BD%AE.png"></p>
<ul>
<li>当我们在当前终端窗口启动redis-server后，如果退出了当前终端，redis-server也会随之停止，因此我们要修改配置文件，让Redis能够保持后台运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件路径视个人安装情况而定</span></span><br><span class="line">vim /xxx/xxx/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将daemonize no改为daemonize yes</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时启动redis-server后，Redis就可以一直在后台运行了</span></span><br><span class="line">./redis-server /usr/my_software/redis/redis-6.2.6/redis.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>当我们使用Redis连接工具，如AnotherRedisDesktopManager或者在程序中连接Redis时，会发现无法连接，此时需要修改redis.conf配置文件</li>
</ul>
<blockquote>
<p><strong>注意！！！如果是使用的云服务器，需要在云服务器控制台的安全组里放行Redis的端口号，否则在外网无法连接到云服务器的Redis</strong></p>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Centos%E5%AE%89%E8%A3%85Redis%2FRedis%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E6%8A%A5%E9%94%99.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件路径视个人安装情况而定</span></span><br><span class="line">vim /xxx/xxx/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 bind 127.0.0.1 -::1 这行配置，将其注释</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1 -::1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 protected-mode yes 这行配置，将其改为 protected-mode no</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要为Redis设置密码，取消 # requirepass foobared 的注释，在requirepass后添加自己要设置的密码</span></span><br><span class="line"><span class="comment"># 如果我们设置了密码，那么就不用配置 protected-mode no 了，在连接Redis时配置我们设置的密码就好了</span></span><br><span class="line">requirepass helloredis</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="在Java程序中使用Jedis或RedisTemplate连接Redis"><a href="#在Java程序中使用Jedis或RedisTemplate连接Redis" class="headerlink" title="在Java程序中使用Jedis或RedisTemplate连接Redis"></a>在Java程序中使用Jedis或RedisTemplate连接Redis</h3><ul>
<li><p>创建一个SpringBoot项目（个人习惯，可以使用普通的Spring项目），在application.yml配置文件中添加Redis的配置信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">101.34</span><span class="number">.155</span><span class="number">.68</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">codecho@0110</span></span><br></pre></td></tr></table></figure></li>
<li><p>引入Redis依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通过RedisTemplate操作Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;today&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;today&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/Centos%E5%AE%89%E8%A3%85Redis%2F%E4%BD%BF%E7%94%A8RedisTemplate%E6%93%8D%E4%BD%9CRedis.png"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CentOS清理磁盘空间</title>
    <url>/2023/02/18/2022-10-05-CentOS%E6%B8%85%E7%90%86%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<ol>
<li><p>起因</p>
<p>在centos上发现mysql容器启动不起来，于是用<code>docker logs mysql</code>看了下日志，发现有报错信息，显示磁盘没有空间了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error writing file &#x27;/var/lib/mysql/auto.cnf&#x27; (OS errno 28 - No space left on device) </span><br></pre></td></tr></table></figure></li>
<li><p>分析</p>
<ul>
<li><p>使用<code>df -h</code>可以看到<code>/</code>目录的磁盘使用率已经达到100%</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        3.8G     0  3.8G   0% /dev</span><br><span class="line">tmpfs           3.8G     0  3.8G   0% /dev/shm</span><br><span class="line">tmpfs           3.8G  796K  3.8G   1% /run</span><br><span class="line">tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        50G   48G     0 100% /</span><br><span class="line">tmpfs           768M     0  768M   0% /run/user/0</span><br></pre></td></tr></table></figure></li>
<li><p>进入<code>/</code>目录，使用<code>du -sh *</code>查看各个目录所占用的空间大小，可以看到其中<code>usr</code>和<code>var</code>两个目录占用的空间最大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">du -sh *</span><br><span class="line">..........</span><br><span class="line">26G     usr</span><br><span class="line">21G     var</span><br></pre></td></tr></table></figure></li>
<li><p>继续查看<code>usr</code>和<code>var</code>目录的空间占用情况，这里使用<code>sort</code>命令按照空间占用从大到小的顺序进行排列，并且通过<code>head</code>命令只展示前10项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du /usr/ | sort -nr | head</span><br><span class="line">20092340        /usr/</span><br><span class="line">5654140 /usr/elasticsearch</span><br><span class="line">4665460 /usr/nacos</span><br><span class="line">4562944 /usr/nacos/bin</span><br><span class="line">4562900 /usr/nacos/bin/logs</span><br><span class="line">2743372 /usr/elasticsearch/node-0</span><br><span class="line">2022416 /usr/elasticsearch/node-1</span><br><span class="line">1571536 /usr/from_pc</span><br><span class="line">1359084 /usr/elasticsearch/node-0/logs</span><br><span class="line">1349160 /usr/share</span><br><span class="line"></span><br><span class="line">du -h var</span><br><span class="line">13778628        /var/</span><br><span class="line">7738316 /var/lib</span><br><span class="line">6870460 /var/lib/docker</span><br><span class="line">5616924 /var/<span class="built_in">log</span></span><br><span class="line">4220916 /var/<span class="built_in">log</span>/journal</span><br><span class="line">4220908 /var/<span class="built_in">log</span>/journal/20200817140600710641424667768813</span><br><span class="line">3852356 /var/lib/docker/containers</span><br><span class="line">3825708 /var/lib/docker/containers/67a37780732bd46633f1ef94ad3ba9ea389f41bee9e929fc63c7e96fe1d3d57c</span><br><span class="line">2789052 /var/lib/docker/overlay2</span><br><span class="line">1007108 /var/<span class="built_in">log</span>/redis</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>清理</p>
<p>经过上面分析后，可以发现占用空间较大的主要是一些日志和自己创建的目录，比如这里的<code>/usr/from_pc</code>保存了一些软件压缩包，清理该目录也不会有任何影响</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>编写shell脚本禁止非法访问的ip</title>
    <url>/2023/02/18/2022-10-25-%E7%BC%96%E5%86%99shell%E8%84%9A%E6%9C%AC%E7%A6%81%E6%AD%A2%E9%9D%9E%E6%B3%95ip%E8%AE%BF%E9%97%AELinux/</url>
    <content><![CDATA[<h4 id="需要提前知道的一些内容"><a href="#需要提前知道的一些内容" class="headerlink" title="需要提前知道的一些内容"></a>需要提前知道的一些内容</h4><ol>
<li><p>Linux下的<code>/var/log/secure</code>文件记录了登录Linux服务器的日志信息，如果有人尝试破解你的服务器，那么可以在这个文件中看到很多密码错误的信息，如下图</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E7%BC%96%E5%86%99shell%E8%84%9A%E6%9C%AC%E7%A6%81%E6%AD%A2%E9%9D%9E%E6%B3%95ip%E8%AE%BF%E9%97%AELinux%2F%E6%9F%A5%E7%9C%8Bvar-log-secure%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97.PNG"></p>
</li>
<li><p>Linux下的<code>/etc/hosts.deny</code>文件可以配置需要禁止访问的ip，外部请求进入时，会先在<code>/etc/hosts.allow</code>中检查ip是否存在，若存在，直接放行请求，如果没有，判断在是否在<code>/etc/hosts.deny</code>中，如果在，禁止请求连接</p>
</li>
<li><p>Linux支持cron定时任务，搭配shell脚本可以让我们定时运行自己编写的脚本，不需要人工进行干预</p>
</li>
</ol>
<blockquote>
<p>本机Linux版本为CentOS7</p>
</blockquote>
<h4 id="先梳理整个流程"><a href="#先梳理整个流程" class="headerlink" title="先梳理整个流程"></a>先梳理整个流程</h4><ol>
<li>读取<code>/var/log/secure</code>文件，筛选出试图登录服务器但密码错误的信息</li>
<li>从每一行信息中分离出对应的外部ip</li>
<li>对这些ip进行排序和去重，统计每个ip尝试登录的次数</li>
<li>遍历所有的外部ip，判断当前ip尝试登录次数是否超过忍耐值（可能自己有时候也会输错密码或者其他原因导致登录失败），将该ip添加到<code>/etc/hosts.deny</code>中</li>
<li>使用Linux自带的cron服务创建定时任务，每隔一定的时间就执行该脚本</li>
</ol>
<h4 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h4><ol>
<li><p>创建<code>deny_illegal_ip.sh</code>脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/shell_study</span><br><span class="line">touch deny_illegal_ip.sh</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个文件来保存非法访问的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch illegal_ip_list.txt</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个文件来保存cron定时任务执行日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch cron_task.log</span><br></pre></td></tr></table></figure></li>
<li><p>编写脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IP_LIST_PATH=<span class="string">&quot;/usr/shell_study/illegal_ip_list.txt&quot;</span></span><br><span class="line"><span class="comment"># hosts.deny path</span></span><br><span class="line">HOSTS_DENY_PATH=<span class="string">&quot;/etc/hosts.deny&quot;</span></span><br><span class="line"><span class="comment"># hosts.deny backup path</span></span><br><span class="line">HOSTS_DENY_BAK_PATH=<span class="string">&quot;/etc/hosts.deny.bak&quot;</span></span><br><span class="line"><span class="comment"># cron task log path</span></span><br><span class="line">CRON_TASK_LOG_PATH=<span class="string">&quot;/usr/shell_study/cron_task.log&quot;</span></span><br><span class="line"><span class="comment"># the number of illegal ip</span></span><br><span class="line">IP_COUNT=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># clean old ip file</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$IP_LIST_PATH</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    cat /dev/null &gt; <span class="variable">$IP_LIST_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extract illegal ip</span></span><br><span class="line">cat <span class="variable">$SECURE_LOG_PATH</span> | grep <span class="string">&quot;Failed password&quot;</span> | awk -F <span class="string">&quot;from&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="string">&quot;port&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq -c &gt; <span class="variable">$IP_LIST_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reset hosts.deny, as we check the ip whether existed in hosts.deny, so this step can be removed </span></span><br><span class="line"><span class="comment">#if [ -e $HOSTS_DENY_BAK_PATH ]</span></span><br><span class="line"><span class="comment">#then</span></span><br><span class="line"><span class="comment">#    cat $HOSTS_DENY_BAK_PATH &gt; $HOSTS_DENY_PATH</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add illegal ip to hosts.deny which appears more than once</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> IP_LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    COUNT=`<span class="built_in">echo</span> <span class="variable">$IP_LINE</span> | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">    IP=`<span class="built_in">echo</span> <span class="variable">$IP_LINE</span> | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$COUNT</span> -ge 2 -a `grep -c <span class="variable">$IP</span> <span class="variable">$HOSTS_DENY_PATH</span>` -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">let</span> IP_COUNT++</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;sshd:<span class="variable">$IP</span>&quot;</span> &gt;&gt; <span class="variable">$HOSTS_DENY_PATH</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$IP_LIST_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add cron task log</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>: added <span class="variable">$IP_COUNT</span> illegal ip&quot;</span> &gt;&gt; <span class="variable">$CRON_TASK_LOG_PATH</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置定时任务，每天执行一次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 0 * * * /usr/shell_study/deny_illegal_ip.sh</span><br></pre></td></tr></table></figure></li>
<li><p>查看定时任务日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /usr/shell_study/cron_task.log</span><br><span class="line">2022-10-24 22:00:01: added 0 illegal ips</span><br><span class="line">2022-10-24 22:30:01: added 0 illegal ips</span><br><span class="line">2022-10-24 23:00:01: added 0 illegal ips</span><br><span class="line">2022-10-24 23:30:01: added 0 illegal ips</span><br><span class="line">2022-10-25 00:00:01: added 0 illegal ips</span><br><span class="line">2022-10-25 00:30:01: added 1 illegal ips</span><br><span class="line">2022-10-25 01:00:02: added 0 illegal ips</span><br><span class="line">2022-10-25 01:30:01: added 0 illegal ips</span><br><span class="line">2022-10-25 02:00:01: added 0 illegal ips</span><br><span class="line">2022-10-25 02:30:01: added 0 illegal ips</span><br><span class="line">2022-10-25 03:00:01: added 0 illegal ips</span><br></pre></td></tr></table></figure></li>
<li><p>查看ip是否被禁止访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts.deny</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>如何创建自己的第一个springboot-starter</title>
    <url>/2023/02/18/2022-11-28-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/</url>
    <content><![CDATA[<blockquote>
<p>对于SpringBoot我们一定不会陌生，由于其快速方便的开发方式让我们从各种繁琐的配置中解放出来，让我们的开发效率得到了大大提升，而各种starter则是其最重要的组成部分之一</p>
</blockquote>
<h3 id="什么是starter？"><a href="#什么是starter？" class="headerlink" title="什么是starter？"></a>什么是starter？</h3><p>我觉得可以简单认为starter是不同场景下（如MySQL、Redis、RocketMQ等）需要的一系列依赖的集合，就像是一个个可以单独引用的模块，有了starter，我们就可以使用其内置的各种依赖完成当前场景下的需求开发</p>
<h3 id="starter的结构？"><a href="#starter的结构？" class="headerlink" title="starter的结构？"></a>starter的结构？</h3><ol>
<li><p>在IDEA中打开一个SpringBoot项目，选择一个starter依赖展开查看，这里以MyBatis为例</p>
<ul>
<li><p><code>pom.properties</code>：记录了starter的artifactId、groupId和version信息</p>
</li>
<li><p><code>pom.xml</code>：是starter所需的依赖，比如mybatis-spring、mybatis-spring-boot-autoconfigure</p>
<p>等</p>
</li>
<li><p><code>MANIFEST.MF</code>：记录了jar包的构建信息，比如jdk版本等</p>
</li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter%2Fspringboot-starter%E7%BB%93%E6%9E%84.png"></p>
</li>
<li><p>用同样的方式打开<code>mybatis-spring-boot-autoconfigure</code>的依赖</p>
<ul>
<li><code>additional-spring-configuration-metadata.json</code>：手动添加IDE配置提示</li>
<li><code>spring.factories</code>：key-value键值对形式，记录需要被加载的配置类信息</li>
<li><code>spring-configuration-metadata.json</code>：自动生成的IDE配置提示</li>
<li><code>spring-autoconfigure-metadata.properties</code>：自动配置类是否被加载的条件</li>
<li>除了上述，还有若干Class，如<code>MybatisAutoConfiguration</code>配置类，<code>MybatisProperties</code>属性类等等</li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/mybatis-configure%E4%BE%9D%E8%B5%96%E7%BB%93%E6%9E%84.png"></p>
</li>
</ol>
<h3 id="如何创建自己的springboot-starter？"><a href="#如何创建自己的springboot-starter？" class="headerlink" title="如何创建自己的springboot-starter？"></a>如何创建自己的springboot-starter？</h3><blockquote>
<p>简单来说，分成如下几个步骤</p>
<p>1.创建一个maven项目，名字为xxx-springboot-autoconfigure（不固定），里面包含XxxAutoConfiguration配置类、XxxProperties属性类（非必须）、spring.factories文件（key为org.xxx.EnableAutoConfiguration，value为XxxAutoConfiguration）</p>
<p>2.创建一个空的maven项目，名字为xxx-springboot-starter（不固定），在pom.xml中引入上述的xxx-springboot-autoconfigure项目</p>
<p>2.创建一个springboot项目，引入xxx-springboot-starter项目，创建测试类使用starter中提供的功能类验证是否成功</p>
</blockquote>
<h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><ol>
<li><p>创建一个名为<code>redisson-util-springboot-autoconfigure</code>的maven项目，结构如下</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/autoconfigure%E7%BB%93%E6%9E%84.png"></p>
<p>RedissonUtilAutoConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedissonUtilProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonUtilAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonUtilProperties properties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建RedissonClient</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String password = properties.getPassword();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; nodes = properties.getNodes();</span><br><span class="line">        <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;redis://&quot;</span> + node);</span><br><span class="line">        &#125;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useClusterServers().setPassword(password).setScanInterval(<span class="number">5000</span>).setNodeAddresses(list);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RedissonUtilProperties.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = RedissonUtilProperties.PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonUtilProperties</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;redisson&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// redis密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// redis集群地址（ip:port）</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNodes</span><span class="params">(List&lt;String&gt; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring.factories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.codecho.RedissonUtilAutoConfiguration</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个名为<code>redisson-util-springboot-starter</code>的maven项目，结构如下</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/starter%E7%BB%93%E6%9E%84.png"></p>
</li>
<li><p>创建一个名为<code>test-starter</code>的springboot项目，引入<code>redisson-util-springboot-starter</code>项目依赖，结构如下</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/test-starter%E7%BB%93%E6%9E%84.png"></p>
<p>application.properties（redis配置信息自填）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redisson.password=xxx</span><br><span class="line">redisson.nodes=xxx.xxx.xxx.xxx:6379,xxx.xxx.xxx.xxx:6389,xxx.xxx.xxx.xxx:6399</span><br></pre></td></tr></table></figure>

<p>测试类代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        winPrize();</span><br><span class="line">    &#125;, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        winPrize();</span><br><span class="line">    &#125;, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winPrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String lockKey = <span class="string">&quot;goods:1001&quot;</span>;</span><br><span class="line">    RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (lock.isLocked()) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 痛失大奖&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> lockFlag = lock.tryLock();</span><br><span class="line">    <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 离中奖只差一步，别灰心，后面还有机会&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot; 他就是天选之子!&quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行测试方法，观察控制台输出</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot-starter/test-starter%E6%B5%8B%E8%AF%95%E8%BE%93%E5%87%BA.png"></p>
<p>使用Redis可视化工具（这里使用的Another Redis Desktop Manager）获取分布式锁的信息，发现其存活时间为30s，到期后锁被删除。如果需要多次运行测试方法，记得等待锁过期后再测试，否则会产生两个线程都获取不到锁的情况。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>使用IDEA构建docker镜像</title>
    <url>/2023/03/17/2023-03-16-%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><ol>
<li>IDEA软件（安装有Docker插件，新版本会自带）</li>
<li>装有Docker环境的Linux服务器/虚拟机</li>
</ol>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol>
<li><p>在IDEA中创建一个SpringBoot项目，并编写一个controller，用于验证服务是否部署成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/id/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResponse <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        UserDO user = userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> CommonResponse.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>右键项目，创建一个名为<code>Dockerfile</code>的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用openjdk镜像</span><br><span class="line">FROM openjdk:8-jre</span><br><span class="line"></span><br><span class="line"># 工作目录</span><br><span class="line">WORKDIR /home/docker</span><br><span class="line"></span><br><span class="line"># 复制jar包到容器</span><br><span class="line">ADD ./target/user-0.0.1-SNAPSHOT.jar ./user.jar</span><br><span class="line"></span><br><span class="line"># 运行jar包</span><br><span class="line">ENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;,&quot;java -jar $JAVA_OPTS user.jar&quot;]</span><br></pre></td></tr></table></figure></li>
<li><p>右键Dockerfile文件，点击<code>Modify Run Configuration</code>，编辑运行配置</p>
<p>配置docker服务器信息</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%2FIDEA%E9%85%8D%E7%BD%AEdocker2.png"></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%2FIDEA%E9%85%8D%E7%BD%AEdocker3.png"></p>
<p>配置docker运行参数（镜像tag、容器名称、端口映射、运行前执行<code>package</code>命令）</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%2F%E9%85%8D%E7%BD%AEdocker%E8%BF%90%E8%A1%8C%E5%8F%82%E6%95%B0.png"></p>
</li>
<li><p>右键Dockerfile文件，点击运行，在Services栏可以看到docker的镜像和正在运行的容器</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%2FIDEA%E8%BF%9E%E6%8E%A5docker.png"></p>
</li>
<li><p>验证docker镜像是否部署成功</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8IDEA%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%2F%E9%AA%8C%E8%AF%81docker%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MySQL学习</title>
    <url>/2023/02/18/2019-08-02-MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ol>
<li><p>起别名</p>
<ul>
<li><p>优点</p>
<ul>
<li>便于理解</li>
<li>如果要查询的字段有重名的情况，使用别名可以区分开来</li>
</ul>
</li>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一</span><br><span class="line">select count(*) &#x27;总预约数&#x27; from reservation_record </span><br><span class="line"># 方式二</span><br><span class="line">select count(*) as &#x27;总预约数&#x27; from reservation_record </span><br><span class="line"># 如果别名是关键字，可以使用 &#x27;&#x27; 或 &quot;&quot; 包裹别名</span><br><span class="line">select count(*) as &quot;select&quot; from reservation_record</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>去重</p>
<ul>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct hospital_id from reservation_record </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>“+”号的作用：mysql中的 “+” 只用来作为运算符</p>
<ul>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果两个操作数都是数值型，做加法运算</span><br><span class="line">select 500+20</span><br><span class="line"># 如果其中一个操作数为字符型，先尝试将其转换为数值型，如果转换成功，做加法运算；否则将其当作 0 ，再做加法运算</span><br><span class="line">select &quot;500&quot;+20</span><br><span class="line"># 如果其中一个操作数为 null ，则结果必为 null</span><br><span class="line">select 500+null</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>concat()函数实现拼接</p>
<ul>
<li><p>说明</p>
<ul>
<li>使用concat()函数可以拼接多个内容</li>
</ul>
</li>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CONCAT(&#x27;how &#x27;,&#x27;are &#x27;,&#x27;u&#x27;) as title</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>比较运算符</p>
<ul>
<li><p>说明</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;、&lt;、=</td>
<td align="center">大于、小于、等于</td>
</tr>
<tr>
<td align="center">!=、&lt;&gt;</td>
<td align="center">不等于，&lt;&gt;是mysql的标准写法，建议使用&lt;&gt;</td>
</tr>
<tr>
<td align="center">&gt;=、&lt;=</td>
<td align="center">大于等于、小于等于</td>
</tr>
<tr>
<td align="center">&lt;=&gt;</td>
<td align="center">严格比较两个null值是否相等，均为null时结果为1，只有一个为null时结果为0</td>
</tr>
<tr>
<td align="center">between、not between</td>
<td align="center">（不）在两个范围之间</td>
</tr>
<tr>
<td align="center">in、not in</td>
<td align="center">（不）在集合中</td>
</tr>
<tr>
<td align="center">is null、is not null</td>
<td align="center">（不）为空</td>
</tr>
<tr>
<td align="center">like</td>
<td align="center">模糊匹配</td>
</tr>
</tbody></table>
</li>
<li><p>通配符</p>
<ul>
<li><p>%：替代0个或多个字符</p>
</li>
<li><p>_：替代单个字符</p>
</li>
<li><p>转义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过 &quot;\&quot;转义符 ，这里 \ 后的 % 不再是通配符</span><br><span class="line">select * from reservation_record where title like &#x27;_\%%&#x27;</span><br><span class="line"># 通过 escape关键字 ，这里 &amp; 之后的 % 不再是通配符</span><br><span class="line">select * from reservation_record where title like &#x27;_&amp;%%&#x27; escape &#x27;&amp;&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找年龄大于1的宠物信息</span><br><span class="line">select * from pet_archives where age &gt; 1</span><br><span class="line"># 查找年龄不等于2的宠物信息</span><br><span class="line">select * from pet_archives where age &lt;&gt; 2</span><br><span class="line"># 查找年龄大于等于2的宠物信息</span><br><span class="line">select * from pet_archives where age &gt;= 2</span><br><span class="line"># 查找年龄不在1~2范围的宠物信息</span><br><span class="line">select * from pet_archives where age not between 1 and 2</span><br><span class="line"># 查找宠物主id在（1,3,5）中的宠物信息</span><br><span class="line">select * from pet_archives where pet_user_id in (1,3,5)</span><br><span class="line"># 查找品种不为null的宠物信息</span><br><span class="line">select * from pet_archives where variety is not null</span><br><span class="line"># 查找标题第三个字符为“哈”的预约信息</span><br><span class="line">select * from reservation_record where title like &#x27;__哈%&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>逻辑运算符</p>
<ul>
<li><p>说明：用于连接条件表达式</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;或and</td>
<td align="center">逻辑与</td>
</tr>
<tr>
<td align="center">||或or</td>
<td align="center">逻辑或</td>
</tr>
<tr>
<td align="center">!或not</td>
<td align="center">逻辑非</td>
</tr>
<tr>
<td align="center">xor</td>
<td align="center">逻辑异或</td>
</tr>
</tbody></table>
</li>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找性别为m，年龄大于1的宠物信息</span><br><span class="line">select * from pet_archives where gender = &#x27;m&#x27; and age &gt; 1</span><br><span class="line"># 查找性别为m或者年龄大于1的宠物信息</span><br><span class="line">select * from pet_archives where gender = &#x27;m&#x27; or age &gt; 1</span><br><span class="line"># 查找性别不为m的宠物信息</span><br><span class="line">select * from pet_archives where not gender = &#x27;m&#x27;</span><br><span class="line"># 查找性别为m，年龄小于等于1、性别不为m，年龄大于1的宠物信息</span><br><span class="line">select * from pet_archives where gender = &#x27;m&#x27; xor age &gt; 1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>排序查询</p>
<ul>
<li><p>说明</p>
<ul>
<li>select 查询列表 from 表名 [where 查询条件] order by 排序列表 asc|desc</li>
<li>默认升序</li>
</ul>
</li>
<li><p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按照年龄从大到小顺序查询宠物信息</span><br><span class="line">select * from pet_archives order by age desc</span><br><span class="line"># 按照评分（按表达式排序）从低到高顺序查询预约信息</span><br><span class="line">select *,rate*1.0 from reservation_record order by rate*1.0 asc</span><br><span class="line"># 按照评分（按别名排序）从低到高顺序查询预约信息</span><br><span class="line">select *,rate*1.0 评分 from reservation_record order by 评分 asc</span><br><span class="line"># 按照标题长度（按函数排序）从大到小顺序查询预约信息</span><br><span class="line">select * from reservation_record order by length(title) desc</span><br><span class="line"># 按照年龄从大到小，id从小到大顺序（按多字段排序）查询宠物信息</span><br><span class="line">select * from pet_archives order by age desc,id asc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符函数</p>
<ul>
<li>length(str)<ul>
<li><p>返回参字符串的<strong>字节个数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select length(title) 字节数 from reservation_record</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>char_length(str)<ul>
<li><p>返回字符串的<strong>字符个数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select char_length(title) 字符数 from reservation_record</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>concat(str1,str2,…)<ul>
<li><p>拼接多个字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat(title,reservation_date) from reservation_record</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>lower(str)<ul>
<li><p>将字符串转为小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lower(&#x27;HELLO&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>upper(str)<ul>
<li><p>将字符串转为大写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select upper(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>substr(str,pos)<ul>
<li><p>截取从pos位置及末尾所有字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select SUBSTR(&#x27;welcometomysql&#x27;,10)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>substr(str,pos,len)<ul>
<li><p>截取从pos位置开始，<strong>字符长度</strong>为len的字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select SUBSTR(&#x27;welcometomysql&#x27;,8,2)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>instr(str,substr)<ul>
<li><p>返回substr子串在str中出现的第一个位置，找不到返回0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select instr(&#x27;HelloWorldWorld&#x27;,&#x27;World&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>trim(str)<ul>
<li><p>去除字符串str开始和结尾的空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select trim(&#x27;    hellowor ld   &#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>trim(remstr from str)<ul>
<li><p>去除字符串str开始和结尾的remstr字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select TRIM(&#x27;A&#x27; FROM &#x27;Ahelloworld&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>lpad(str1,len,str2)<ul>
<li><p>在str1字符串开始处填充字符串str2，使其长度达到len，如果len小于原长度，从右边截断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lpad(&#x27;HELLO&#x27;,8,&#x27;z&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>rpad(str1,len,str2)<ul>
<li><p>在str1字符串结尾处填充字符串str2，….</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rpad(&#x27;HELLO&#x27;,8,&#x27;z&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>replace(str1,s,str2)<ul>
<li><p>使用str2字符串替换str1字符串中的s字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select replace(&#x27;hello&#x27;,&#x27;e&#x27;,&#x27;a&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>数字函数</p>
<ul>
<li>round(x)</li>
<li>对x四舍五入，等同于round(x,0)</li>
<li>round(x,d)<ul>
<li><p>对x四舍五入，保留d位小数，d为负数时，指定小数点左边d位整数位为0，同时小数位也为0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select round(3213.1415926,-2)</span><br><span class="line"># 3200</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>ceil(x)<ul>
<li><p>向上取整，返回&gt;=x的<strong>最小整数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ceil(1.23)</span><br><span class="line"># 2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>floor(x)<ul>
<li><p>向下取整，返回&lt;=x的<strong>最大整数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select floor(1.01)</span><br><span class="line"># 1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>truncate(x,d)</li>
<li>截断x，保留d位小数，不会进行四舍五入，d为负数时，指定小数点左边d为整数位为0  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select truncate(1.234,-2)</span><br><span class="line"># 0</span><br></pre></td></tr></table></figure></li>
<li>mod(x,y)<ul>
<li><p>返回x除以y后的余数</p>
</li>
<li><p>运算规则：x-x/y*y</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select mod(-10,3)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>日期函数</p>
<ul>
<li>now()</li>
</ul>
</li>
</ol>
<ul>
<li>返回系统当前日期和时间<pre><code>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select NOW()</span><br><span class="line"># 2019-08-12 09:35:59</span><br></pre></td></tr></table></figure>
</code></pre>
<ul>
<li>current_date、curdate<ul>
<li><p>返回系统当前日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CURRENT_DATE()</span><br><span class="line"># 2019-08-12</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>current_time、curtime<ul>
<li><p>返回系统当前时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CURRENT_TIME()</span><br><span class="line"># 09:37:27</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>year(d)<ul>
<li><p>根据d返回年份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select year(now())</span><br><span class="line"># 2019</span><br><span class="line">select year(&#x27;2019-08-12&#x27;)</span><br><span class="line"># 2019</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>month(d)<ul>
<li><p>根据d返回月份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select month(now())</span><br><span class="line"># 8	</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>day(d)<ul>
<li><p>根据d返回日</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select day(now())</span><br><span class="line"># 12</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>hour(d)<ul>
<li><p>根据d返回小时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select hour(now())</span><br><span class="line"># 9</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>minute(d)<ul>
<li><p>根据d返回分钟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select minute(now())</span><br><span class="line"># 41</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>second(d)<ul>
<li><p>根据d返回秒</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select second(now())</span><br><span class="line"># 50</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>str_to_date(str,format)<ul>
<li><p>将日期格式的字符串转换成指定格式的日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select str_to_date(&#x27;2019-08-12 9:42:00&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)</span><br><span class="line"># 2019-08-12 09:42:00</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>date_format(date,format)<ul>
<li><p>将日期转换成字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date_format(now(),&#x27;%Y_%m_%d %H:%i:%s&#x27;)</span><br><span class="line"># 2019_08_12 09:49:51</span><br><span class="line">select date_format(&#x27;2019/08/12 09:51:00&#x27;,&#x27;%Y/%m/%d %H:%i:%s&#x27;)</span><br><span class="line"># 2019/08/12 09:51:00</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>mysql日期格式<table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>4位年份</td>
</tr>
<tr>
<td>%y</td>
<td>2位年份</td>
</tr>
<tr>
<td>%M</td>
<td>英文月名（January…December）</td>
</tr>
<tr>
<td>%m</td>
<td>月份（01,02,03…12）</td>
</tr>
<tr>
<td>%c</td>
<td>月份（1,2,3…12）</td>
</tr>
<tr>
<td>%D</td>
<td>带有英文的天</td>
</tr>
<tr>
<td>%d</td>
<td>天（00,01,02,03…31）</td>
</tr>
<tr>
<td>%e</td>
<td>天（0,1,2,3…31）</td>
</tr>
<tr>
<td>%H</td>
<td>小时，二十四小时制（00,01,02…23）</td>
</tr>
<tr>
<td>%h</td>
<td>小时，十二小时制（01,02,03…12）</td>
</tr>
<tr>
<td>%i</td>
<td>分钟（00,01,02…59）</td>
</tr>
<tr>
<td>%s</td>
<td>秒（00,01,02…59）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<ol start="11">
<li><p>其他函数</p>
<ul>
<li><p>version()</p>
<ul>
<li><p>查询数据库版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select version()</span><br><span class="line"># 8.0.14</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>database()</p>
<ul>
<li><p>查询当前数据库名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database()</span><br><span class="line"># pet_hospital</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>user()</p>
<ul>
<li><p>查看当前用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user()</span><br><span class="line"># root@101.231.252.114</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>流程控制函数</p>
<ul>
<li><p>if(expr,v1,v2)</p>
<ul>
<li><p>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select IF(10%2=0,&#x27;偶数&#x27;,&#x27;奇数&#x27;)</span><br><span class="line"># 偶数</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>case结构</p>
<ul>
<li><p>CASE 表示函数开始，END表示函数结束。如果condition1成立，返回result1；如果condition2成立，返回result2；如果所有condition都不成立，返回result；其中一个condition成立，后面的condition不再判断</p>
</li>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE expression</span><br><span class="line">    WHEN condition1 THEN result1</span><br><span class="line">    WHEN condition2 THEN result2</span><br><span class="line">   ...</span><br><span class="line">    WHEN conditionN THEN resultN</span><br><span class="line">    ELSE result</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li>
<li><p>简单case函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">case age</span><br><span class="line">	when 1 then &#x27;一岁大的狗&#x27;</span><br><span class="line">	when 2 then &#x27;两岁大的狗&#x27;</span><br><span class="line">	when 3 then &#x27;三岁大的狗&#x27;</span><br><span class="line">	else &#x27;老狗&#x27;</span><br><span class="line">end &#x27;年龄&#x27;</span><br><span class="line">from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p>case搜索函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">case </span><br><span class="line">	when age = 1 then &#x27;一岁大的狗&#x27;</span><br><span class="line">	when age = 2 then &#x27;两岁大的狗&#x27;</span><br><span class="line">	when age = 3 then &#x27;三岁大的狗&#x27;</span><br><span class="line">	else &#x27;老狗&#x27;</span><br><span class="line">end &#x27;年龄&#x27;</span><br><span class="line">from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>注意：</strong></em>简单case函数只返回第一个符合条件的值，剩下的自动忽略</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>分组函数</p>
<ul>
<li><p>功能：用作统计使用，又称作聚合函数、统计函数</p>
</li>
<li><p>分类</p>
<ul>
<li><p>求和：sum</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sum(age) from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p>平均值：avg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(age) from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p>最大值：max</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(age) from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p>最小值：min</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(age) from pet_archives</span><br></pre></td></tr></table></figure></li>
<li><p>统计数量：count</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from pet_archives</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特点</p>
<ul>
<li>sum()、avg()一般用于处理数值型</li>
<li>max()、min()、count()可以处理任意类型</li>
<li>以上函数都可以忽略null值</li>
<li>可以和distinct关键字搭配上述函数进行去重</li>
</ul>
</li>
<li><p>count()函数详解</p>
<ul>
<li>count(*)：对行的数目进行统计，包含NULL</li>
<li>count(column)：对指定列不为NULL的行的数目进行统计</li>
<li>效率<ul>
<li>MYISAM引擎下，count(*)的效率高</li>
<li>INNODB引擎下，count(*)和count(1)的效率差不多，比count(column)要高一些</li>
</ul>
</li>
<li><em><strong>注意：</strong></em>和分组函数一同查询的字段要求是group by后面的字段</li>
</ul>
</li>
</ul>
</li>
<li><p>分组查询</p>
<ul>
<li><p>group by </p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 分组函数,字段（需要出现在group by后面）</span><br><span class="line">from table</span><br><span class="line">[where 筛选条件]</span><br><span class="line">group by 分组列表</span><br><span class="line">[order by 字句]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特点</p>
<ul>
<li><p>分组查询中的筛选条件分为两类</p>
<table>
<thead>
<tr>
<th></th>
<th>数据源</th>
<th>位置</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>分组前筛选</td>
<td>原始表</td>
<td>group by子句前面</td>
<td>where</td>
</tr>
<tr>
<td>分组后筛选</td>
<td>分组后的结果集</td>
<td>group by子句后面</td>
<td>having</td>
</tr>
</tbody></table>
</li>
<li><p>分组函数做条件肯定是放在having子句中</p>
</li>
<li><p>能用分组前筛选的，就优先考虑使用分组前筛选</p>
</li>
</ul>
</li>
<li><p>按函数分组</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),length(name) lth from pet_archives group by lth</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>按多个字段分组</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,name,age lth from pet_archives group by name,id,age</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>添加排序</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,name,age from pet_archives group by id,name,age order by age desc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>连接查询</p>
<ul>
<li><p>含义：多表查询，查询的字段来自多个表时，使用连接查询</p>
</li>
<li><p>笛卡尔乘积：A表m行数据，B表n行数据，查询结果X=m*n行数据</p>
<ul>
<li>原因：没有有效的连接条件</li>
<li>解决：添加有效的连接条件</li>
</ul>
</li>
<li><p>连接查询分类</p>
<ul>
<li>按年代分类<ul>
<li>sql92标准：仅仅支持内连接</li>
<li>sql99标准：推荐，支持内连接+外连接（左外和内外）+交叉连接</li>
</ul>
</li>
<li>按功能分类<ul>
<li>内连接<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
</li>
<li>外连接<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
</li>
<li>交叉连接</li>
</ul>
</li>
</ul>
</li>
<li><p>sql92标准</p>
<ul>
<li><p>等值连接</p>
<ul>
<li><p>多表等值连接的结果为多表的交际部分</p>
</li>
<li><p>n表连接，至少需要n-1个连接条件</p>
</li>
<li><p>多表的顺序没有要求</p>
</li>
<li><p>一般需要给表起别名，方便书写、避免字段模棱两可</p>
</li>
<li><p>可以和之前介绍的子句配合使用，如排序、分组、筛选</p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name 宠物,a.age 宠物年龄,b.nickname 主人 from pet_archives a,pet_owner_user b where a.pet_user_id = b.id and a.age &gt; 1 group by a.name,a.age,b.nickname order by a.age desc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非等值连接</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select salary,grade_level from employee a,job_grade b where salary between b.lowest_salary and highest_salary</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自连接</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.employee_id 员工号,a.name 员工姓名,b.employee_id 主管员工号,b.name 主管姓名 from employee a,employee b where a.manager_id = b.employee_id</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>sql99标准</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表 from table1 [连接类型] join table2 on 连接条件 [where 筛选条件] [group by 分组列表] [having 筛选条件] [order by 排序列表] </span><br></pre></td></tr></table></figure></li>
<li><p>连接类型</p>
<ul>
<li>内连接：inner</li>
<li>外连接<ul>
<li>左外：left [outer]</li>
<li>右外：right [outer]</li>
<li>全外：full [outer]</li>
</ul>
</li>
<li>交叉连接：cross</li>
</ul>
</li>
<li><p>内连接</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表 from table1 inner join table2 on 连接条件</span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>添加排序、分组、筛选</li>
<li>inner可以省略</li>
<li>筛选条件放在where后面，连接条件放在on后面，提高阅读性</li>
<li>inner join连接和sql92中的等值连接效果一样，都是查询多表的交集</li>
</ul>
</li>
<li><p>等值连接</p>
<ul>
<li><p>示例：三表联查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name,a.age,b.nickname from pet_archives a inner join pet_owner_user b on a.pet_user_id = b.id inner join visit_record c on a.id = c.pet_id group by a.name,a.age,b.nickname order by a.age desc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非等值连接</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),grade_level from employee a join job_grade b on a.salary between b.lowest_salary and highest_salary group by grade_level having</span><br><span class="line">count(*) &gt; 20 order by grade_level desc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自连接</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name 员工姓名,b.name 主管姓名 from employee a join employee b on a.manager_id = b.employee_id</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>外连接</p>
<ul>
<li><p>应用场景：用于查询表1有，表2没有的记录</p>
</li>
<li><p>特点</p>
<ul>
<li>外连接的查询结果为主表中的所有记录，如果从表中有和它匹配的，显示匹配的值，如果从表中没有和它匹配的，显示NULL，外连接查询结果=内连接查询结果+主表中存在但从表中不存在的记录</li>
<li>左外连接，left join左边的是主表；右外连接，right join右边的的是主表</li>
<li>左外和右外交换两个表的顺序，可以实现同样的效果</li>
<li>全外连接=内连接的结果+表1有但表2没有的记录+表2有但表1没有的记录</li>
</ul>
</li>
<li><p>左外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,nickname from pet_owner_user a left outer join pet_archives b on a.id = b.pet_user_id</span><br></pre></td></tr></table></figure></li>
<li><p>全外连接</p>
<ul>
<li><strong>注意：</strong>MySQL不支持全连接，可以通过下面的sql来实现全连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name,b.nickname from pet_archives a left join pet_owner_user b on a.pet_user_id = b.id union select a.name,b.nickname from pet_archives a right join pet_owner_user b on a.pet_user_id = b.id</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>交叉连接</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name,b.nickname from pet_archives a cross join pet_owner_user b</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
<ul>
<li><p>含义：出现在其他语句中的select语句，称为子查询或内查询；外部的查询语句，称为主查询或外查询</p>
</li>
<li><p>分类</p>
<ul>
<li>按子查询出现的位置<ul>
<li>select后面：仅仅支持标量子查询</li>
<li>from后面：支持表子查询</li>
<li>where或having后面：标量子查询、列子查询、行子查询</li>
<li>exist后面（相关子查询）：表子查询</li>
</ul>
</li>
<li>按结果集的行列数不同<ul>
<li>标量子查询（结果集只有一行一列）</li>
<li>列子查询（结果集只有一列多行）</li>
<li>行子查询（结果集只有一行多列）</li>
<li>表子查询（结果集一般为多行多列）</li>
</ul>
</li>
</ul>
</li>
<li><p>where或having后面的子查询</p>
<ul>
<li><p>分类</p>
<ul>
<li><p>标量子查询（单行子查询）</p>
</li>
<li><p>列子查询（多行子查询）</p>
</li>
<li><p>行子查询（一行多列）</p>
</li>
</ul>
</li>
<li><p>特点</p>
<ul>
<li>子查询放在小括号内</li>
<li>子查询一般放在条件的右侧</li>
<li>标量子查询，一般配合单行操作符使用  &gt; &lt; &gt;= &lt;= = &lt;&gt; ；列子查询，一般配合多行操作符使用 IN ANY/SOME ALL</li>
<li>子查询的执行优先于主查询执行，主查询的条件需要使用子查询的结果</li>
</ul>
</li>
<li><p>标量子查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(salary),department_id from employee group by department_id having min(salary) &gt; (select min(salary) from employee where department_id = 50)</span><br></pre></td></tr></table></figure></li>
<li><p>多行比较操作符</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>IN/NOT IN</td>
<td><strong>等于</strong>列表中的<strong>任意一个</strong></td>
</tr>
<tr>
<td>ANY/SOME</td>
<td>和子查询返回的<strong>某个值</strong>比较</td>
</tr>
<tr>
<td>ALL</td>
<td>和子查询返回的<strong>所有值</strong>比较</td>
</tr>
</tbody></table>
</li>
<li><p>列子查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,name,pet_user_id from pet_archives where pet_user_id in (select id from pet_owner_user where age &gt; 20)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>select后面的子查询</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.nickname 姓名,(select count(*) from pet_archives b where a.id = b.pet_user_id) 宠物总数 from pet_owner_user a</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>from后面的子查询</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select temp.*,a.grade_level from (select avg(salary) avg_salary,department_id from employee group by department_id) temp inner join job_grade b on temp.avg_salary between lowest_sal and highest_sal</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>exist后面的子查询</p>
<ul>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.nickname from pet_owner_user a where exists (select * from pet_archives b where a.id = b.pet_user_id)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>分页查询</p>
<ul>
<li><p>应用场景：当要显示的数据，一页显示不完，需要分页提交sql请求</p>
</li>
<li><p>语法</p>
<ul>
<li>offset：要显示条目的起始索引（起始索引从0开始）</li>
<li>size：要显示的条目个数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表 from table [join type join 表2 on 连接条件 where 筛选条件 group by 分组字段 having 分组后的筛选 oder by 排序列表] limit offset,size </span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>limit语句放在查询语句的最后</li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,name,pet_user_id from pet_archives group by id limit 0,5</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>联合查询</p>
<ul>
<li><p>union：联合，合并，将多条查询语句的结果合并成一个结果</p>
</li>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">查询语句3</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>要求多条查询语句的查询列数是一致的</li>
<li>多条查询语句的查询列的类型和顺序最好保持一致</li>
<li>union关键字默认去重，如果使用union all，可以包含重复项</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>要查询的结果来自多个表，且多个表没有直接的连接，但查询的信息一致时</li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from pet_archives where name like &#x27;%哈%&#x27; </span><br><span class="line">union </span><br><span class="line">select * from pet_archives where age &gt; 1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>DML语言</p>
<ul>
<li><p>数据操纵语言</p>
<ul>
<li>插入：insert</li>
<li>删除：delete</li>
<li>修改：update</li>
</ul>
</li>
<li><p>插入语句</p>
<ul>
<li><p>方式1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table(column1,...) values(value1,...)</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into reservation_type(name,total,hospital_id) values(&#x27;宠物寄养&#x27;,0,1001)</span><br></pre></td></tr></table></figure></li>
<li><p>方式2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table set column1 = value1,...</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into reservation_type set name = &#x27;代遛狗&#x27;,total = 0,hospital_id = 1001</span><br></pre></td></tr></table></figure></li>
<li><p>批量插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table(column1,...) values(value,...),(value,...),(value,...)</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into reservation_type(name,total,hospital_id) values(&#x27;测试1&#x27;,0,1001),(&#x27;测试2&#x27;,0,1001),(&#x27;测试3&#x27;,0,1001)</span><br></pre></td></tr></table></figure></li>
<li><p>insert方式1和方式2的比较</p>
<ul>
<li>方式1支持插入多行</li>
<li>方式1支持子查询，方式2不支持<ul>
<li>insert into table(column1,…) select xxx,…</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>修改语句</p>
<ul>
<li><p>修改单表的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table set column1 = value1,... where 筛选条件</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update reservation_type set name = &#x27;代撸猫&#x27; where id = 2010</span><br></pre></td></tr></table></figure></li>
<li><p>修改多表的记录</p>
<ul>
<li><p>sql92语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table1 别名,table2 别名,... set column1 = value1,... where 连接条件 and 筛选条件</span><br></pre></td></tr></table></figure></li>
<li><p>sql99语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table1 别名 inner|left|right join table2 别名 on 连接条件 set column = value1,... where 筛选条件</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update pet_archives a left join pet_owner_user b on a.pet_user_id = b.id set a.gender = &#x27;f&#x27;,b.gender = &#x27;f&#x27; where b.id = 18</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除语句</p>
<ul>
<li><p>方式1：delete</p>
<ul>
<li><p>删除单表的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from table where 筛选条件</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from reservation_type where id = 2016</span><br></pre></td></tr></table></figure></li>
<li><p>删除多表的记录</p>
<ul>
<li><p>sql92语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete table1的别名,table2的别名 from table1 别名,table2 别名 where 连接条件 and 筛选条件</span><br></pre></td></tr></table></figure></li>
<li><p>sql99语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete table1的别名,table2的别名 from table1 别名 inner|left|right join table2 别名 on 连接条件 where 筛选条件</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete a,b from pet_archives a left join pet_owner_user b on a.pet_user_id = b.id where b.id = 18</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式2：truncate</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>delete和truncate的比较</p>
<ul>
<li>delete可以添加where筛选条件，truncate不可以添加筛选条件</li>
<li>truncate删除效率比delete要高一些</li>
<li>使用delete删除记录后，再插入数据，自增列的值从断点开始；truncate删除记录后，再插入数据，自增列的值从1开始</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>delete删除有返回值；truncate删除没有返回值<pre><code>- delete是DML语句，可以使用rollback进行回滚；truncate是DDL语句，需要drop权限，因此会隐式提交，不能rollback
</code></pre>
</li>
</ul>
<ol start="20">
<li><p>DDL语言</p>
<ul>
<li><p>数据定义语言</p>
<ul>
<li>库的管理<ul>
<li>创建、修改、删除</li>
</ul>
</li>
<li>表的管理<ul>
<li>创建、修改、删除</li>
</ul>
</li>
<li>创建：create</li>
<li>修改：alter</li>
<li>删除：drop</li>
</ul>
</li>
<li><p>库的管理</p>
<ul>
<li><p>库的创建</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 库名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>库的修改</p>
<ul>
<li><p>修改库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename 旧库名 to 新库名</span><br></pre></td></tr></table></figure></li>
<li><p>修改库的字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 库名 character set utf8</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>库的删除</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 库名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>表的管理</p>
<ul>
<li><p>表的创建</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名 列类型(长度) 约束,# 注释</span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table testTable(</span><br><span class="line">    testId int(10) primary key,# 测试id</span><br><span class="line">    testName varchar(255)# 测试名称</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>表的修改</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add|drop|modify|change column 列名 [列类型 约束]</span><br></pre></td></tr></table></figure></li>
<li><p>修改列名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 change column 旧列名 新列名 类型(长度) </span><br></pre></td></tr></table></figure></li>
<li><p>修改列类型或约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 类型(长度)</span><br></pre></td></tr></table></figure></li>
<li><p>添加新列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add column 列名 类型(长度)</span><br></pre></td></tr></table></figure></li>
<li><p>删除列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop column 列名</span><br></pre></td></tr></table></figure></li>
<li><p>修改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 rename to 新表名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>表的删除</p>
<ul>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists 旧表名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>表的复制</p>
<ul>
<li><p>仅仅复制表的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 目标表 like 源表 </span><br></pre></td></tr></table></figure></li>
<li><p>复制表的结构和数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 目标表 select * from 源表</span><br></pre></td></tr></table></figure></li>
<li><p>只复制部分数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 目标表 select 查询列表 from 源表 where 筛选条件</span><br></pre></td></tr></table></figure></li>
<li><p>只复制某些字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 目标表 select 要复制的字段 from 源表 where 0 </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>常见数据类型</p>
<ul>
<li>数值型<ul>
<li>整数：默认有符号，如果要设置无符号，使用unsigned关键字<ul>
<li>tinyint：一个字节</li>
<li>smallint：两个字节</li>
<li>mediumint：三个字节</li>
<li>int/integer：四个字节</li>
<li>bigint：八个字节</li>
</ul>
</li>
<li>小数<ul>
<li>定点型<ul>
<li>decimal(m,d)：如果m&gt;d，m+2个字节，否则d+2个字节 </li>
</ul>
</li>
<li>浮点型<ul>
<li>fload(m,d)：四个字节，单精度</li>
<li>double(m,d)：八个字节，双精度</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>字符型<ul>
<li>较短的文本<ul>
<li>char(m)：固定长度字符串，m在0~255之间</li>
<li>varchar(m)：可变长度字符串，m在0~65535之间</li>
</ul>
</li>
<li>较长的文本<ul>
<li>text：长文本数据</li>
<li>blob：二进制长文本数据</li>
</ul>
</li>
</ul>
</li>
<li>日期型<ul>
<li>date：最小值1000-01-01，最大值9999-12-31</li>
<li>datetime：最小值1000-01-01 00:00:00，最大值9999-12-31 23:59:59</li>
<li>timestamp：最小值1970-01-01 00:00:00，最大值2038-01-19</li>
<li>year：最小值1901，最大值2155</li>
<li>time：最小值-838:59:59，最大值838:59:59</li>
</ul>
</li>
</ul>
</li>
<li><p>常见约束</p>
<ul>
<li><p>含义：为了保证表中数据的准确性和可靠性，对表中的数据进行的一种限制</p>
</li>
<li><p>分类</p>
<ul>
<li>not null：非空，保证该字段的值不能为空</li>
<li>default：默认，保证该字段有默认值</li>
<li>primary key：主键，保证该字段的值在表中是唯一的，并且不为空</li>
<li>unique：唯一，保证该字段的值具有唯一性，可以为空</li>
<li>check：检查约束，mysql不支持</li>
<li>foreign key：外键，限制两个表的关系，保证该字段的值必须来自主表的关联列的值，在从表中添加外键约束，用于引用主表中某列的值</li>
</ul>
</li>
<li><p>列级约束和表级约束</p>
<ul>
<li>列级约束：对一个数据列建立的约束，可在列定义时声明，也可在列定义后声明，not null、default只存在列级约束</li>
<li>表级约束：对多个数据列简历的约束，只能在列定义后声明，primary key、unique、foreign key同时存在列级约束和表级约束</li>
</ul>
</li>
<li><p>创建表时添加约束</p>
<ul>
<li><p>添加列级约束：字段名 数据类型 约束类型 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	id int(11) primary key,# 主键</span><br><span class="line">	st_name varchar(255) not null,# 非空</span><br><span class="line">	gender char(1),</span><br><span class="line">	age int default 0,# 默认</span><br><span class="line">	c_id int foreign key reference class(id)# 外键</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">create table class(</span><br><span class="line">	id int(11) primary key,# 主键</span><br><span class="line">	c_name varchar(255) not null# 非空</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>添加表级约束：constraint 约束名 约束类型(字段名)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	id int,</span><br><span class="line">	st_name varchar(255),</span><br><span class="line">	gender varchar(255),</span><br><span class="line">	age int,</span><br><span class="line">	c_id int,</span><br><span class="line">	</span><br><span class="line">	constraint pk primary key(id),# 主键</span><br><span class="line">	constraint uk unique(st_name),# 唯一</span><br><span class="line">	constraint fk_c_id foreign key(c_id) reference class(id),# 外键</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>主键和唯一的比较</p>
<ul>
<li>主键：保证唯一性；不允许为空；一张表中只能有一个</li>
<li>唯一：保证唯一性；允许为空；一张表中可以有多个</li>
</ul>
</li>
<li><p>外键特点</p>
<ul>
<li>需要在从表中设置外键关系</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容</li>
<li>主表的关联列必须是一个key（一般为主键或唯一）</li>
<li>插入数据时，先插入主表，再插入从表；删除数据时正好相反</li>
</ul>
</li>
<li><p>修改表时添加约束</p>
<ul>
<li><p>添加列级约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型 约束</span><br></pre></td></tr></table></figure></li>
<li><p>添加表级约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 约束类型(列名) [主表(关联列)]</span><br></pre></td></tr></table></figure></li>
<li><p>添加非空约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型 not null</span><br></pre></td></tr></table></figure></li>
<li><p>添加默认约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型 default 默认值</span><br></pre></td></tr></table></figure></li>
<li><p>添加主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列级约束</span><br><span class="line">alter table 表名 modify column 列名 数据类型 primary key</span><br><span class="line"># 表级约束</span><br><span class="line">alter table 表名 add primary key(列名)</span><br></pre></td></tr></table></figure></li>
<li><p>添加唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列级约束</span><br><span class="line">alter table 表名 modify column 列名 数据类型 unique</span><br><span class="line"># 表级约束</span><br><span class="line">alter table 表名 add unique(列名)</span><br></pre></td></tr></table></figure></li>
<li><p>添加外键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 从表名 add constraint 外键名称 foreign key(列名) reference 主表名(列名)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改表时删除约束</p>
<ul>
<li><p>删除非空约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型 NULL</span><br></pre></td></tr></table></figure></li>
<li><p>删除默认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型</span><br></pre></td></tr></table></figure></li>
<li><p>删除主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop primary key</span><br></pre></td></tr></table></figure></li>
<li><p>删除唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop index 约束名</span><br></pre></td></tr></table></figure></li>
<li><p>删除外键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 约束名</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>标识列</p>
<ul>
<li><p>含义：不需要手动设置值，系统提供默认的序列值，又叫自增序列</p>
</li>
<li><p>特点</p>
<ul>
<li>自增序列必须和主键配合使用吗？<ul>
<li>不一定，但是必须是一个key（）</li>
</ul>
</li>
<li>一个表最多有几个自增序列？<ul>
<li>最多一个</li>
</ul>
</li>
<li>自增序列可以是什么类型？<ul>
<li>只能是数值型</li>
</ul>
</li>
<li>自增序列如何设置自增的步长值？<ul>
<li>set auto_increment_increment = x</li>
</ul>
</li>
</ul>
</li>
<li><p>创建表时设置自增序列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	id int primary key auto_increment</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>修改表时设置自增序列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型 [约束] auto_increment</span><br></pre></td></tr></table></figure></li>
<li><p>修改表时删除自增序列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify column 列名 数据类型</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>事务</p>
<ul>
<li><p>含义</p>
<ul>
<li>一条或多条sql语句执行时要么全部执行成功，要么全部失败</li>
</ul>
</li>
<li><p>特性</p>
<ul>
<li>原子性（Atomicity）：事务中的操作像原子一样不可分割，要么全部成功，要么全部失败</li>
<li>一致性（Consistency）：事务的执行结果必须使数据库从一个一致性状态变为另一个一致性状态（系统状态满足数据的完整性约束；系统的状态反映数据库本应描述的现实世界的真实状态）</li>
<li>隔离性（Isolation）：并发执行的事务不会相互影响，其对数据库的影响和它们串行执行时一样</li>
<li>持久性（Durability）：事务一旦提交，其对数据库的影响是永久性的。任何事务或系统故障都不会导致数据丢失</li>
</ul>
</li>
<li><p>事务的创建</p>
<ul>
<li><p>隐式事务：事务没有明显的开启和结束的标记，如insert、update、delete语句</p>
</li>
<li><p>显式事务：事务具有明显的开启和结束的标记</p>
<ul>
<li><p>前提：必须设置禁用自动提交</p>
</li>
<li><p>步骤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin或start transaction</span><br><span class="line">	sql语句,</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">commit</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>事务并发问题</p>
<ul>
<li>脏读：事务A读取了被事务B更新的数据，但事务B未提交，后面如果事务B回滚，事务A之前读取到的数据就是临时且无效的</li>
<li>不可重复读：事务A第一次读取到一行记录row1，事务B提交后，事务A第二次读取到row1，但row1的数据已经发生变化</li>
<li>幻读：事务A第一次读取到一行记录row1，事务B提交修改后，事务A第二次读取到row1和row2…</li>
</ul>
</li>
<li><p>数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题</p>
</li>
<li><p>事务隔离级别</p>
<ul>
<li>READ UNCOMMITED：允许事务读取未被其他事务提交的变更，脏读、不可重复读、幻读都可能存在</li>
<li>READ COMMITED：只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读、幻读可能存在</li>
<li>REPEATABLE READ：一个事务在其提交之前，读取的数据都是相同的，即使其他事务作了修改，但幻读可能存在</li>
<li>SERIALIZABLE：一个事务持续期间，禁止其他事务进行任何操作，但效率很低</li>
</ul>
</li>
<li><p>Oracle支持的事务隔离级别：READ COMMITED（默认）、SERIALIZABLE</p>
</li>
<li><p>MySQL支持的事务隔离级别：READ UNCOMMITED、READ COMMITED、REPEATABLE READ（默认）、SERIALIZABLE</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot项目不返回值为null的字段</title>
    <url>/2023/04/26/2023-04-26-SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAnull%E7%9A%84%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<h4 id="自定义配置类，注入ObjectMapper"><a href="#自定义配置类，注入ObjectMapper" class="headerlink" title="自定义配置类，注入ObjectMapper"></a>自定义配置类，注入ObjectMapper</h4><ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ObjectMapper.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<p>配置前：</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAnull%E7%9A%84%E5%AD%97%E6%AE%B5/%E9%85%8D%E7%BD%AEjackson%E5%89%8D.png"></p>
<p>配置后：</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAnull%E7%9A%84%E5%AD%97%E6%AE%B5/%E9%85%8D%E7%BD%AEjackson%E5%90%8E.png"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>GitHub Page去除域名绑定后仍定向至以前的域名</title>
    <url>/2023/04/27/2023-04-27-GitHub%20Page%E5%8E%BB%E9%99%A4%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%90%8E%E4%BB%8D%E5%AE%9A%E5%90%91%E8%87%B3%E4%BB%A5%E5%89%8D%E7%9A%84%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<blockquote>
<p>在使用GitHub Page搭建博客后，买了一个域名和xxx.github.io绑定，域名过期后，直接访问xxx.github.io发现每次都重定向到之前的域名，然而在更换了浏览器重新访问发现可以正常访问，因此想到可能是浏览器的缓存信息没有更新</p>
</blockquote>
<h4 id="解决方法：清除浏览器缓存（以Google-Chrome为例）"><a href="#解决方法：清除浏览器缓存（以Google-Chrome为例）" class="headerlink" title="解决方法：清除浏览器缓存（以Google Chrome为例）"></a>解决方法：清除浏览器缓存（以Google Chrome为例）</h4><p>打开浏览器<code>设置</code>，点击<code>隐私和安全</code>，选择<code>清除浏览数据</code>，<strong>建议通过google账号同步数据</strong>后退出，然后勾选下面的浏览记录、cookie、缓存文件、网站设置等，点击<code>清除数据</code>，重新访问GitHub Page网址，发现可以正常访问博客内容</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/GitHubPage%E5%8E%BB%E9%99%A4%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%90%8E%E4%BB%8D%E5%AE%9A%E5%90%91%E8%87%B3%E4%BB%A5%E5%89%8D%E7%9A%84%E5%9F%9F%E5%90%8D/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98.png"></p>
]]></content>
  </entry>
  <entry>
    <title>CentOS查找历史命令</title>
    <url>/2023/05/05/2023-05-05-CentOS%E6%9F%A5%E6%89%BE%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>在使用CentOS时，有时候我们需要执行某个时间之前的命令，但是这些命令有时候参数过多，一时不容易想起，这时候很需要一个工具来帮我们记录执行过哪些命令</p>
</blockquote>
<h3 id="使用ctrl-R反向查找-搜索历史命令"><a href="#使用ctrl-R反向查找-搜索历史命令" class="headerlink" title="使用ctrl+R反向查找|搜索历史命令"></a>使用<kbd>ctrl</kbd>+<kbd>R</kbd>反向查找|搜索历史命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(reverse-i-search)`<span class="string">&#x27;:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 输入要查找的命令，如docker</span></span><br><span class="line"><span class="string">(reverse-i-search)`docker&#x27;</span>: docker logs 6316724f7425</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ctrl+R向前连续查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方向键 &lt; or &gt; 选取命令</span></span><br><span class="line">[root@centos7 codecho]<span class="comment"># docker logs 6316724f7425</span></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Spring Boot统一结果响应和异常处理</title>
    <url>/2023/05/18/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>在开发中，我们会经常使用公司或其他平台的各种接口，每个接口的功能各不相同，但是它们的响应结果基本上是一致的，都会包含code(响应码)、msg(错误信息)、data(真实数据)这三部分，有些公司会使用Map来返回这些信息，但是需要编写重复性的代码，不太优雅，而Spring为我们提供了能够简化代码编写的功能，下面就来尝试一下吧</p>
</blockquote>
<h4 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h4><ol>
<li><p>创建一个SpringBoot项目并引入<code>spring-boot-starter-web</code>依赖，分别创建controller和service</p>
<ul>
<li><p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/id/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDO <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        UserDO user = userService.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDO <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserMapper.xml省略（可以直接硬编码返回，省略数据库配置）</p>
</li>
</ul>
</li>
<li><p>测试controller返回结果</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/springboot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C1.png"></p>
</li>
</ol>
<h4 id="统一结果响应"><a href="#统一结果响应" class="headerlink" title="统一结果响应"></a>统一结果响应</h4><ol>
<li><p>创建<code>CommonResponse</code>和<code>CommonResponseAdvice</code></p>
<ul>
<li><p>CommonResponse.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应是否成功:</span></span><br><span class="line"><span class="comment">     *  true: 成功</span></span><br><span class="line"><span class="comment">     *  false: 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">(Boolean success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">(Boolean success, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">(Boolean success, <span class="keyword">int</span> errCode, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.errCode = errCode;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 响应成功无返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021-12-05 15:22:07</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">CommonResponse&lt;T&gt; <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResponse&lt;&gt;(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 响应成功并返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021-12-05 15:22:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">CommonResponse&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResponse&lt;&gt;(<span class="keyword">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 响应失败，无错误码，有错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021-12-05 17:37:39</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errMsg 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; CommonResponse&lt;T&gt; <span class="title">fail</span><span class="params">(String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResponse&lt;&gt;(<span class="keyword">false</span>, -<span class="number">1</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 响应失败，有错误码和错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021-12-05 15:25:27</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errCode 错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errMsg 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">CommonResponse&lt;T&gt; <span class="title">fail</span><span class="params">(<span class="keyword">int</span> errCode, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResponse&lt;&gt;(<span class="keyword">false</span>, errCode, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CommonResponseAdvice.java</p>
<p>supports方法返回true表示响应结果需要进行重写</p>
<p>beforeBodyWrite方法对响应结果进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.codecho.base.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponseAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CommonResponse.success(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重新运行程序，再次测试controller返回结果</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/springboot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C2.png"></p>
</li>
</ol>
<h4 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h4><ol>
<li><p>当程序出现异常时，controller返回的结果并不是我们希望获得的</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/springboot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C4.png"></p>
</li>
<li><p>创建ResponseStatusEnum、<code>CommonException</code>和<code>CommonExceptionHandler</code></p>
<ul>
<li><p>ResponseStatusEnum.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResponseStatusEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ERROR_500(<span class="number">500</span>, <span class="string">&quot;服务器未知错误&quot;</span>),</span><br><span class="line">    ERROR_400(<span class="number">400</span>, <span class="string">&quot;错误请求&quot;</span>),</span><br><span class="line">    USER_NOT_FOUND(<span class="number">233</span>, <span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResponseStatusEnum(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CommonException.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6124960120588564481L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> ResponseStatusEnum statusEnum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonException</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonException</span><span class="params">(ResponseStatusEnum statusEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(statusEnum.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = statusEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.statusEnum = statusEnum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CommonExceptionHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.codecho.base.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 处理基础异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022-11-23 15:59:48</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 基础异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;CommonException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResponse <span class="title">exceptionHandler</span><span class="params">(CommonException ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出日志</span></span><br><span class="line">        log.error(<span class="string">&quot;CommonException: &#123;&#125;&quot;</span>, ex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CommonResponse.fail(ex.getCode(), ex.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...处理自定义或常见的异常</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 处理其他异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> codecho</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022-11-23 16:00:05</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 其他异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResponse <span class="title">exceptionHandler</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出日志</span></span><br><span class="line">        log.error(<span class="string">&quot;Exception: &#123;&#125;&quot;</span>, ex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CommonResponse.fail(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改<code>CommonResponseAdvice</code></p>
<ul>
<li><p>CommonResponseAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.codecho.base.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponseAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMON_RESPONSE = <span class="string">&quot;CommonResponse&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置统一异常处理或controller返回类型为CommonResponse，直接返回，不需要再次封装</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(body) &amp;&amp; COMMON_RESPONSE.equals(body.getClass().getSimpleName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> CommonResponse.success(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改UserController的getById方法</p>
<ul>
<li><p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDO <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    UserDO user = userService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CommonException(ResponseStatusEnum.USER_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重新运行程序，测试controller返回结果</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/springboot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C5.png"></p>
</li>
</ol>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote>
<p>有时候不是所有的接口都必须返回统一的格式，某些情况下我们想要自定义controller的返回，但是配置统一结果响应后，它是对注解<code>@RestControllerAdvice</code>的属性<code>basePackages</code>的包和其子包生效的。如果想要在某些使其不生效，可以考虑使用自定义注解和重写<code>ResponseBodyAdvice</code>接口的<code>supports</code>方法来实现</p>
</blockquote>
<ol>
<li><p>创建自定义注解<code>@MyResponse</code></p>
<ul>
<li><p>MyResponse.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyResponse &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改<code>CommonResponseAdvice</code>的<code>supports</code>方法</p>
<ul>
<li><p>CommonResponseAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果方法上有@MyResponse注解，返回false，不需要设置统一响应结果</span></span><br><span class="line">    <span class="keyword">if</span> (returnType.hasMethodAnnotation(MyResponse.class)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在<code>UserController</code>中创建一个带有<code>@MyResponse</code>注解的请求</p>
<ul>
<li><p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyResponse</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/mock&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDO <span class="title">mockUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserDO user = <span class="keyword">new</span> UserDO();</span><br><span class="line">    user.setUsername(<span class="string">&quot;july&quot;</span>);</span><br><span class="line">    user.setMobilePhone(<span class="string">&quot;18756989090&quot;</span>);</span><br><span class="line">    user.setUserState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重新运行程序，测试新的请求</p>
<p>可以看到，添加自定义注解后，统一结果响应未生效</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-01-SpringBoot%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%93%8D%E5%BA%94%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/springboot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C6.png"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>使用shell脚本切换JDK版本</title>
    <url>/2023/05/09/2023-05-06-%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%88%87%E6%8D%A2JDK%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<blockquote>
<p>JDK版本现在已经更新到20了，但是目前大部分企业和开发者仍然使用的是JDK8（你发任你发，我用JAVA8），不过随着时间的推移，切换到新的JDK版本是大势所趋。因此作为开发者，为了保证我们能够持续进步，了解和掌握新版本的功能和特性是非常重要和有价值的。在已有一个稳定版本(如JDK8)的基础上，我们可以选择再安装一个新版本(如JDK17)来供我们学习和测试，由于大部分JAVA应用是部署在Linux上的，所以这次我们通过shell脚本的方式来切换JDK版本。</p>
</blockquote>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol>
<li>安装JDK后需要在<code>/etc/profile</code>中配置环境变量，因此我们的目标就是更改配置文件</li>
<li>想要更改配置文件，首先需要知道要修改的内容，我的配置是<code>export JAVA_HOME=/usr/java/jdk</code>，这里<code>=</code>后面的路径就是我们要修改的内容</li>
<li>由于每个人的<code>/etc/profile</code>文件各不相同，因此上述配置项可能在x行，也可能在y行，所以我们需要找到该配置项所在的位置</li>
<li>找到配置项位置后，我们将原JDK路径替换为目标JDK路径</li>
<li>再使用<code>source</code>命令更新配置信息即可完成JDK版本的切换</li>
</ol>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><ol>
<li><p>创建脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch switch_jdk.sh</span><br></pre></td></tr></table></figure></li>
<li><p>编写脚本文件</p>
<p>简要说一下思路</p>
<ul>
<li>定义一个数组来存放JDK版本和路径信息，使用==关联数组==，有点类似hashmap，key为JDK版本号，value为JDK安装路径</li>
<li>执行脚本格式为<code>. switch_jdk.sh version</code>，其中version即为要切换的JDK版本号，在shell脚本中使用<code>$1</code>(脚本第一个参数)可以获取version的值</li>
<li>获取到目标version后，在关联数组中获取其对应的JDK安装路径，如果获取不到，则表示目标version不存在，输出提示信息</li>
<li>根据配置项<code>export JAVA_HOME</code>获取其所在的行位置信息，使用<code>grep</code>查找配置项所在行信息，使用<code>awk</code>提取行号</li>
<li>使用<code>sed</code>命令替换该行配置内容，<code>-i</code>表示直接修改文件内容，<code>79c</code>表示替换第79行所在的内容</li>
<li>使用<code>source</code>命令更新环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> here are jdk versions you installed</span></span><br><span class="line">my_versions=([8]=&quot;/usr/java/jdk&quot; [17]=&quot;/usr/java/jdk17&quot;)</span><br><span class="line"></span><br><span class="line">if [ -z $&#123;my_versions[$1]&#125; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;jdk$1 does not exist! please check whether you installed&quot;</span><br><span class="line">else</span><br><span class="line">    # 79:export JAVA_HOME=/usr/java/jdk</span><br><span class="line">    line_number=`grep &quot;export JAVA_HOME&quot; -n profile | awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    sed -i &quot;79c export JAVA_HOME=$&#123;my_versions[$1]&#125;&quot; /etc/profile</span><br><span class="line"></span><br><span class="line">    source /etc/profile</span><br><span class="line"></span><br><span class="line">    echo &quot;switch to jdk$1 successfully!&quot;</span><br><span class="line"></span><br><span class="line">    java -version</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>执行脚本并测试</p>
<ul>
<li><p>先查看当前JDK版本，我这里是JDK8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
<li><p>执行脚本，切换到JDK17</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. switch_jdk.sh 17</span><br></pre></td></tr></table></figure></li>
<li><p>执行脚本，切换到不存在的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. switch_jdk.sh 10</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%88%87%E6%8D%A2JDK%E7%89%88%E6%9C%AC/%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%88%87%E6%8D%A2jdk.png"></p>
</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="==注意=="></a>==注意==</h3><blockquote>
<p>一开始，我使用<code>./switch_jdk.sh</code>来执行的脚本（已添加执行权限），控制台输出的JDK版本信息并没有更新，检查了下脚本，觉得思路没有什么问题，于是新开一个terminal测试，但是使用<code>java -version</code>查看JDK版本时，发现已经是新版本了。</p>
<p>这时候我猜测可能是脚本在当前session没有生效，在开启的新session中生效了，那只有可能是source命令的问题了，其他命令和环境变量没有关系。</p>
<p>查看了下相关信息，发现执行shell脚本的方式不同，其执行效果也是不同的，下面给出相关的信息</p>
</blockquote>
<ol>
<li><code>./xxx.sh</code>，用此种方式执行脚本，会开启子shell来执行脚本，继承父shell环境变量，但是不会更改父shell环境变量，即更改只对子shell生效</li>
<li><code>sh xxx.sh</code>，此种方式效果同上</li>
<li><code>source xxx.sh</code>，等价于<code>. xxx.sh</code>，在当前shell执行脚本，环境变量更改对当前shell生效</li>
</ol>
<h4 id="对于脚本中存在source或其他会影响到环境变量的命令，最好使用source或-来执行脚本"><a href="#对于脚本中存在source或其他会影响到环境变量的命令，最好使用source或-来执行脚本" class="headerlink" title="对于脚本中存在source或其他会影响到环境变量的命令，最好使用source或.来执行脚本"></a>对于脚本中存在<code>source</code>或其他会影响到环境变量的命令，最好使用<code>source</code>或<code>.</code>来执行脚本</h4>]]></content>
  </entry>
  <entry>
    <title>浅谈Java Agent</title>
    <url>/2023/05/18/2023-05-09-%E6%B5%85%E8%B0%88Java%20Agent/</url>
    <content><![CDATA[<blockquote>
<p>在JDK5以后，官方提供了一种新特性 Java Agent，也叫Java 探针技术，它可以帮助我们构建一个和主程序独立的代理程序，通过代理程序可以在不修改主程序代码的情况下对主程序进行增强，如实现性能监测、日志记录、热加载等，很多著名的软件/工具都使用了这个技术，如arthas、skywalking等</p>
<p>下面通过示例来学习如何使用Java Agent</p>
</blockquote>
<h4 id="关于Java-Agent的一些简要说明"><a href="#关于Java-Agent的一些简要说明" class="headerlink" title="关于Java Agent的一些简要说明"></a>关于Java Agent的一些简要说明</h4><ul>
<li>通过<code>-javaagent:agent.jar</code>参数加载agent程序，可以多次使用以加载多个agent</li>
<li>Java Agent有两个方法，一个是<code>premain(String [, Instrumentation])</code>，一个是<code>agentmain(String[, Instrumentation])</code>，<code>Instrumentation</code>参数可选</li>
<li><code>premain</code>方法会在主程序JVM启动前执行，因此可以在此方法中进行一些初始化工作；<code>agentmain</code>方法会在主程序JVM启动后执行，但是不能使用<code>-javaagent</code>参数来加载，而是要使用<code>VirtualMachine</code>的<code>loadAgent</code>方法来进行加载</li>
<li><code>Instrumentation</code>接口提供了在程序运行期间对程序进行动态调整的能力，比如修改字节码、替换class</li>
</ul>
<h4 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h4><p><strong>前提：</strong></p>
<p>创建两个maven项目，一个是主程序，一个是agent</p>
<ul>
<li><p>主程序</p>
<ul>
<li><p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.codecho.demo.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>agent程序</p>
<ul>
<li><p>LogAgent.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAgent</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主程序启动前，代理先执行，如果代理抛出异常，主程序无法正常启动</span></span><br><span class="line">    <span class="comment">// 参数 Instrumentation 可选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#premain executed, args: &quot;</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml（这里的配置是为了生成MANIFEST.MF文件，里面有premain class的信息）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.codecho.agent.LogAgent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>测试premain</strong></p>
<ol>
<li><p>使用<code>maven package</code>得到主程序和agent的jar包</p>
</li>
<li><p>通过<code>-javaagent</code>参数加载agent（这里我把两个jar包放到同一目录了）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不指定参数</span></span><br><span class="line">java -javaagent:log-agent-1.0-SNAPSHOT.jar -jar agent-demo-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定参数</span></span><br><span class="line">java -javaagent:log-agent-1.0-SNAPSHOT.jar=param1,param2,param3 -jar agent-demo-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88JavaAgent/javaagent%E6%88%AA%E5%9B%BE1.png"></p>
</li>
</ol>
<p><strong>测试agentmain</strong></p>
<ol>
<li><p>修改agent程序的<code>LogAgent.java</code>和<code>pom.xml</code></p>
<ul>
<li><p>LogAgent.java</p>
<p>添加<code>agentmain</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAgent</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主程序启动前，代理先执行，如果代理抛出异常，主程序无法正常启动</span></span><br><span class="line">    <span class="comment">// 参数 Instrumentation 可选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#premain executed, args: &quot;</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序启动后，代理后执行</span></span><br><span class="line">    <span class="comment">// 参数 Instrumentation 可选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#agentmain executed, args: &quot;</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml</p>
<p>将<code>Premain-Class</code>改为<code>Agent-Class</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>		</span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>com.codecho.agent.LogAgent<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改主程序的<code>Main.java</code>和<code>pom.xml</code>，新增<code>Agent.java</code></p>
<ul>
<li><p>Main.java</p>
<p>因为<code>agentmain</code>方法是在主程序JVM启动后执行，因此这里使用输入流保证main方法不会马上结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jdk的tools--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;JAVA_HOME&#125;\lib\tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Attach.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attach</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VirtualMachine vm = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的24816是Main主程序的进程号，运行Main.java后使用jps命令查看pid</span></span><br><span class="line">            vm = VirtualMachine.attach(<span class="string">&quot;24816&quot;</span>);</span><br><span class="line">            vm.loadAgent(<span class="string">&quot;D:/IdeaWorkspace/log-agent/target/log-agent-1.0-SNAPSHOT.jar&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AttachNotSupportedException | IOException | AgentLoadException | AgentInitializationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>先运行Main主程序，通过<code>jps</code>查看主程序pid，再运行Attach程序</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88JavaAgent/javaagent%E6%88%AA%E5%9B%BE2.png"></p>
</li>
</ol>
<p><strong>测试Instrumentation#addTransformer方法(作用在premain方法)</strong></p>
<ol>
<li><p>修改agent程序的<code>LogAgent.java</code>和<code>pom.xml</code></p>
<ul>
<li><p>LogAgent.java</p>
<p>修改<code>premain</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAgent</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#premain executed, args: &quot;</span> + args);</span><br><span class="line"></span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> ClassFileTransformer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">                <span class="comment">// 当前类为com/codecho/demo/TrafficService时，才替换class</span></span><br><span class="line">                <span class="keyword">if</span> (!className.equals(<span class="string">&quot;com/codecho/demo/TrafficService&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;replace class: &quot;</span> + className);</span><br><span class="line">                ByteArrayOutputStream bos;</span><br><span class="line">                <span class="comment">// 类加载前替换新的class</span></span><br><span class="line">                <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/IdeaWorkspace/agent-demo/target/classes/com/codecho/demo/TrafficService.class&quot;</span>)) &#123;</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">                    fis.read(buffer);</span><br><span class="line">                    bos.write(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.codecho.agent.LogAgent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改主程序的<code>Main.java</code>，新增<code>TrafficService.java</code></p>
<ul>
<li><p>TrafficService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;take the train&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String transport = <span class="keyword">new</span> TrafficService().transport();</span><br><span class="line">        System.out.println(<span class="string">&quot;transport: &quot;</span> + transport);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>单独运行<code>Main.java</code>，查看输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\IdeaWorkspace\agent-demo\target&gt; java -jar agent-demo-1.0-SNAPSHOT.jar</span><br><span class="line">transport: take the train</span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>TrafficService.java</code>并编译</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;take the plane&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过<code>-javaagent</code>参数加载agent，查看输出</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88JavaAgent/javaagent%E6%88%AA%E5%9B%BE3.png"></p>
</li>
</ol>
<p><strong>测试Instrumentation#retransformClasses方法(作用在agentmain方法)</strong></p>
<ol>
<li><p>修改agent程序<code>LogAgent.java</code>和<code>pom.xml</code></p>
<ul>
<li><p>LogAgent.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAgent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序启动前，代理先执行，如果代理抛出异常，主程序无法正常启动</span></span><br><span class="line">    <span class="comment">// 参数 Instrumentation 可选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#premain executed, args: &quot;</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序启动后，代理后执行</span></span><br><span class="line">    <span class="comment">// 参数 Instrumentation 可选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> ClassNotFoundException, UnmodifiableClassException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAgent#agentmain executed, args: &quot;</span> + args);</span><br><span class="line"></span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> ClassFileTransformer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">                <span class="comment">// 当前类为com/codecho/demo/TrafficService时，才替换class</span></span><br><span class="line">                <span class="keyword">if</span> (!className.equals(<span class="string">&quot;com/codecho/demo/TrafficService&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ByteArrayOutputStream bos;</span><br><span class="line">                <span class="comment">// 类加载前替换新的class</span></span><br><span class="line">                <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/IdeaWorkspace/agent-demo/target/classes/com/codecho/demo/TrafficService.class&quot;</span>)) &#123;</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">                    fis.read(buffer);</span><br><span class="line">                    bos.write(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        instrumentation.retransformClasses(Class.forName(<span class="string">&quot;com.codecho.demo.TrafficService&quot;</span>, <span class="keyword">false</span>, ClassLoader.getSystemClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>com.codecho.agent.LogAgent<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--不加此配置会导致load失败--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--Agent JAR loaded but agent failed to initialize--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改主程序的<code>Main.java</code></p>
<ul>
<li><p>Main.java</p>
<p>通过死循环判断class是否重新加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            String transport = <span class="keyword">new</span> TrafficService().transport();</span><br><span class="line">            System.out.println(<span class="string">&quot;transport: &quot;</span> + transport);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>TrafficService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;take the bus&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>先运行Main主程序，再修改<code>TrafficService</code>的<code>transport</code>方法，通过<code>jps</code>查看主程序pid，再运行Attach程序</p>
<p>可以看到<code>TrafficService#transport</code>的输出从bus变为subway，表明<code>TrafficService</code>类确实重新加载了</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88JavaAgent/javaagent%E6%88%AA%E5%9B%BE4.png"></p>
</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>Java Agent是JDK提供的一种技术，可以对Java程序进行增强、监测、分析等</li>
<li>Java Agent主要有<code>premain</code>和<code>agentmain</code>两个入口方法，<code>Instrumentation</code>接口可以让我们在程序运行期间动态地更改字节码、替换class等</li>
<li>可以通过<code>Javassist</code>或<code>ASM</code>等工具来方便地操作字节码</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>浅谈短链接设计</title>
    <url>/2023/05/09/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>随着互联网的普及，尤其是移动互联网的发展，如今我们每个人都要和各种各样的网站、APP打交道，每天都会收到很多服务、营销等信息，有邮件、短信、微信推送等，其中短信应该是接触最频繁的，毕竟除了正经的短信外，还有很多不良信息甚至有害信息源源不断地发送到我们的手机上。</p>
<p>不知道大家有没有注意，我们经常可以在服务类短信的最后可以看到一个链接，通常是xx活动链接或xx账单链接，而且基本上都很简短，有些甚至只有几个字母，如下图中的中国电信链接，当我们点击链接时，往往会跳转到另一个网址，并且网址链接会比短信中的要长很多，这里其实就是使用的短链接。</p>
</blockquote>
<ul>
<li>短信中的短链接</li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/%E7%9F%AD%E4%BF%A1%E4%B8%AD%E7%9A%84%E7%9F%AD%E9%93%BE%E6%8E%A5.jpg"></p>
<ul>
<li><p>实际跳转网址</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/%E7%9F%AD%E4%BF%A1%E4%B8%AD%E7%9A%84%E7%9F%AD%E9%93%BE%E6%8E%A52.png"></p>
</li>
</ul>
<hr>
<h3 id="为什么要使用短链接"><a href="#为什么要使用短链接" class="headerlink" title="为什么要使用短链接"></a>为什么要使用短链接</h3><ol>
<li><p>短信文本过长会拆分成多条计费，而网址链接一般都比较长，使用短链接能有效降低企业成本</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%88%90%E6%9C%AC.png"></p>
</li>
<li><p>某些内容平台限制文本长度</p>
</li>
<li><p>降低网络传输成本，文本越长，消耗的网络资源也越多</p>
</li>
<li><p>将链接转为二维码，如果链接过长，生成的二维码会难以识别</p>
</li>
<li><p>某些平台对长链接识别不友好</p>
</li>
</ol>
<hr>
<h3 id="短链接原理"><a href="#短链接原理" class="headerlink" title="短链接原理"></a>短链接原理</h3><ol>
<li>根据上面图片可以看到，点击短链接后，会向服务器发起一个请求，服务器返回的状态码为<code>302</code>，并且在<code>response</code>的<code>Location</code>属性返回了实际网址，这里用到的就是<strong>302重定向</strong></li>
<li>重定向分为301重定向和302重定向，301是永久重定向，即首次访问后，每次访问不再请求服务器，而是直接根据浏览器缓存跳转到对应的页面；302是临时重定向，即每次访问都会重新请求服务器</li>
<li>对长链接进行压缩，最常见的就是使用哈希，当然使用其他的算法也可以，比如MD5、SHA等，对于短链接我们关心的是效率，所以使用一般的哈希函数就可以了</li>
<li>生成短链接后，我们需要在数据库保存短链接和长链接的映射关系，这样在重定向时才知道应该向浏览器返回哪个长链接</li>
</ol>
<p><em><strong>知道了原理后，我们可以自己模仿实现上面的效果</strong></em></p>
<hr>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><ol>
<li><p>创建一个web工程，这里为了方便，直接创建一个SpringBoot项目，引入guava和redis依赖，我们使用guava的哈希算法生成哈希值，使用redis来保存链接数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写<code>BizController</code>负责生成短链接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/biz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/generateShortUrl&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateShorUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里使用SpringBoot的官方文档页面作为要重定向的长链接网址</span></span><br><span class="line">        String longUrl = <span class="string">&quot;https://docs.spring.io/spring-boot/docs/2.7.11/reference/html/getting-started.html#getting-started&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用guava提供的哈希工具类对长链接进行压缩，这里使用的是murmur3_32_fixed算法，它会生成32位的哈希值，当然也可以使用其他哈希算法，</span></span><br><span class="line">        String shortUrl = Hashing.murmur3_32_fixed().hashBytes(longUrl.getBytes()).toString();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将短链接和长链接的映射关系保存到redis中，实际开发中可以保存到MySQL数据库，这里为了演示方便直接使用redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(shortUrl, longUrl);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;shorUrl: http://127.0.0.1:8080/short/&quot;</span> + shortUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写<code>ShortUrlController</code>负责重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/short&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortUrlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redirect</span><span class="params">(<span class="meta">@PathVariable(&quot;url&quot;)</span> String url, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从数据库获取短链接对应的长链接，这里用redis演示</span></span><br><span class="line">        String longUrl = stringRedisTemplate.opsForValue().get(url);</span><br><span class="line">        <span class="keyword">if</span> (Strings.isEmpty(longUrl)) &#123;</span><br><span class="line">            response.setStatus(HttpStatus.NOT_FOUND.value());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置状态码为302</span></span><br><span class="line">        response.setStatus(HttpStatus.FOUND.value());</span><br><span class="line">        <span class="comment">// 设置Location为长链接</span></span><br><span class="line">        response.setHeader(HttpHeaders.LOCATION, longUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<ul>
<li><p>测试生成短链接</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/%E6%B5%8B%E8%AF%95%E7%94%9F%E6%88%90%E7%9F%AD%E9%93%BE%E6%8E%A5.png"></p>
</li>
<li><p>查看redis</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/redis%E4%BF%9D%E5%AD%98%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%92%8C%E9%95%BF%E9%93%BE%E6%8E%A5.png"></p>
</li>
<li><p>测试重定向</p>
<p>在浏览器输入<a href="http://localhost:8080/short/9591dfe4">http://localhost:8080/short/9591dfe4</a>，发现成功重定向至SpringBoot文档页面</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-09-%E6%B5%85%E8%B0%88%E7%9F%AD%E9%93%BE%E6%8E%A5%E8%AE%BE%E8%AE%A1/%E6%B5%8B%E8%AF%95%E9%87%8D%E5%AE%9A%E5%90%91.png"></p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>使用短链接可以为我们带来很多好处</li>
<li>生成短链接的方式有很多，除了哈希算法外，还可以使用数据库自增id、redis自增、UUID、雪花算法等，每种方法各有有点，根据自身需求合理选择</li>
<li>生成的短链接需要保证其唯一性，使用MySQL数据库，可以为短链接字段设置唯一索引，使用其他方式需要自己实现方法保证短链接唯一</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Spring Boot实现优雅关闭</title>
    <url>/2023/05/24/2023-05-18-SpringBoot%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<blockquote>
<p>有时候我们需要关闭或重启Java程序，但是可能某个业务流程还未执行结束或占用的资源还未释放，如果使用<code>kill -9</code>这种暴力的方式关闭应用，有可能会导致我们的业务逻辑混乱，数据不一致等问题，因此我们希望使用一种<em><strong>温柔</strong></em>的方式来关闭程序</p>
</blockquote>
<p>在了解优雅关闭前，先了解下什么是shutdown hook</p>
<hr>
<h4 id="JVM提供的shutdown-hook"><a href="#JVM提供的shutdown-hook" class="headerlink" title="JVM提供的shutdown hook"></a>JVM提供的shutdown hook</h4><ol>
<li><p>创建主程序，添加钩子线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;this is a custom shutdown hook&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JVM terminated...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主程序正常结束，shutdown hook正常被调用</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-22-SpringBoot%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/jvm%E6%8F%90%E4%BE%9B%E7%9A%84hook.png"></p>
</li>
<li><p>主程序主动退出，shutdown hook也会正常被调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;this is a custom shutdown hook&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JVM terminated...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改主程序，让主程序sleep 20s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;this is a custom shutdown hook&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JVM terminated after 20 seconds&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过Linux的kill命令终止主程序，使用<code>kill -9</code>命令，shutdown hook并不会被调用，使用<code>kill -15</code>会被调用</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-22-SpringBoot%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/linux%E4%BD%BF%E7%94%A8kill%E5%91%BD%E4%BB%A41.png"></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-22-SpringBoot%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/linux%E4%BD%BF%E7%94%A8kill%E5%91%BD%E4%BB%A42.png"></p>
</li>
</ol>
<p><strong>简单来说，shutdown hook是jvm在关闭时会调用的一个钩子</strong></p>
<hr>
<h4 id="JVM处理信号量通知"><a href="#JVM处理信号量通知" class="headerlink" title="JVM处理信号量通知"></a>JVM处理信号量通知</h4><ol>
<li><p><code>System#initializeSystemClass()</code>初始化，调用<code>Terminator.setup()</code>设置信号量处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize the system class. Called after thread initialization.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeSystemClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	...</span><br><span class="line">    <span class="comment">// 对于程序 挂断、终止、中断的处理    </span></span><br><span class="line">    <span class="comment">// Setup Java signal handlers for HUP, TERM, and INT (where available).</span></span><br><span class="line">    Terminator.setup();</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></li>
<li><p><code>Terminator#setup()</code>设置信号量处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (handler != <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 设置信号量处理器</span></span><br><span class="line">    SignalHandler sh = <span class="keyword">new</span> SignalHandler() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Signal sig)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 调用Shutdown.exit()方法</span></span><br><span class="line">            Shutdown.exit(sig.getNumber() + <span class="number">0200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    handler = sh;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 程序中断处理</span></span><br><span class="line">        Signal.handle(<span class="keyword">new</span> Signal(<span class="string">&quot;INT&quot;</span>), sh);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 程序终止处理</span></span><br><span class="line">        Signal.handle(<span class="keyword">new</span> Signal(<span class="string">&quot;TERM&quot;</span>), sh);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Runtime#addShutdownHook()</code>添加shutdown hook</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addShutdownHook</span><span class="params">(Thread hook)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    ApplicationShutdownHooks.add(hook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ApplicationShutdownHooks#add()</code>添加钩子线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存钩子线程的集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IdentityHashMap&lt;Thread, Thread&gt; hooks;</span><br><span class="line"><span class="comment">// 静态代码块初始化时，向Shutdown添加一个钩子线程</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Shutdown.add(<span class="number">1</span> <span class="comment">/* shutdown hook invocation order */</span>,</span><br><span class="line">                     <span class="keyword">false</span> <span class="comment">/* not registered if shutdown in progress */</span>,</span><br><span class="line">                     <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             runHooks();</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                    );</span><br><span class="line">        hooks = <span class="keyword">new</span> IdentityHashMap&lt;&gt;();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">        <span class="comment">// application shutdown hooks cannot be added if</span></span><br><span class="line">        <span class="comment">// shutdown is in progress.</span></span><br><span class="line">        hooks = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加钩子线程</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Thread hook)</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">//     </span></span><br><span class="line">    hooks.put(hook, hook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行钩子线程</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runHooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Collection&lt;Thread&gt; threads;</span><br><span class="line">    <span class="comment">// 获取所有的钩子线程</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ApplicationShutdownHooks.class) &#123;</span><br><span class="line">        threads = hooks.keySet();</span><br><span class="line">        hooks = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    <span class="keyword">for</span> (Thread hook : threads) &#123;</span><br><span class="line">        hook.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待线程执行结束</span></span><br><span class="line">    <span class="keyword">for</span> (Thread hook : threads) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hook.join();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Shutdown#add()</code>添加钩子线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SYSTEM_HOOKS = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable[] hooks = <span class="keyword">new</span> Runnable[MAX_SYSTEM_HOOKS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> slot, <span class="keyword">boolean</span> registerShutdownInProgress, Runnable hook)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        ...</span><br><span class="line">		<span class="comment">// 添加钩子线程</span></span><br><span class="line">		hooks[slot] = hook;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>System#exit()</code>终止JVM，带程序退出状态code，非0为异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    Runtime.getRuntime().exit(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Runtime#exit()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Shutdown.exit(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>Shutdown#exit()</code>和<code>Shutdown#shutdown()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由Runtime.exit()触发调用</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">synchronized</span> (Shutdown.class) &#123;</span><br><span class="line">        <span class="comment">/* Synchronize on the class object, causing any other thread</span></span><br><span class="line"><span class="comment">             * that attempts to initiate shutdown to stall indefinitely</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        beforeHalt();</span><br><span class="line">        sequence();</span><br><span class="line">        halt(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sequence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    runHooks();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当最后一个非daemon线程执行结束后，由JNI DestroyJavaVM调用，不会关闭JVM</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:       <span class="comment">/* Initiate shutdown */</span></span><br><span class="line">                state = HOOKS;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HOOKS:         <span class="comment">/* Stall and then return */</span></span><br><span class="line">            <span class="keyword">case</span> FINALIZERS:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (Shutdown.class) &#123;</span><br><span class="line">        sequence();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际执行勾子线程的方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runHooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAX_SYSTEM_HOOKS; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable hook;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">// acquire the lock to make sure the hook registered during</span></span><br><span class="line">                <span class="comment">// shutdown is visible here.</span></span><br><span class="line">                currentRunningHook = i;</span><br><span class="line">                hook = hooks[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行勾子线程的run方法</span></span><br><span class="line">            <span class="keyword">if</span> (hook != <span class="keyword">null</span>) hook.run();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ThreadDeath) &#123;</span><br><span class="line">                ThreadDeath td = (ThreadDeath)t;</span><br><span class="line">                <span class="keyword">throw</span> td;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>流程图展示(大致流程)</strong></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-22-SpringBoot%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/jvm%E7%9A%84shutdownhook%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p><strong>可以看到，JVM在<code>System</code>类初始化时会添加信号量处理（如程序中断、程序终止），接收到信号量通知时会触发<code>Shutdown.exit</code>方法，调用自定义的shutdown hook</strong></p>
<hr>
<h4 id="Spring-Boot中的shutdown-hook"><a href="#Spring-Boot中的shutdown-hook" class="headerlink" title="Spring Boot中的shutdown hook"></a>Spring Boot中的shutdown hook</h4><ol>
<li><p><code>SpringApplication#run</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// spring容器启动流程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    refreshContext(context);</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> SpringApplicationShutdownHook shutdownHook = <span class="keyword">new</span> SpringApplicationShutdownHook();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新容器，如果registerShutdownHook为true，调用SpringApplicationShutdownHook#registerApplicationContext()方法注册应用上下文</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">        shutdownHook.registerApplicationContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">    refresh(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>SpringApplicationShutdownHook#registerApplicationContext()</code>，<code>SpringApplicationShutdownHook</code>本身实现了Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册应用上下文</span></span><br><span class="line"><span class="comment">// 1.注册spring容器关闭事件监听器</span></span><br><span class="line"><span class="comment">// 2.调用Runtime#addShutdownHook()方法添加shutdown hook</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加shutdown hook</span></span><br><span class="line">    addRuntimeShutdownHookIfNecessary();</span><br><span class="line">    <span class="keyword">synchronized</span> (SpringApplicationShutdownHook.class) &#123;</span><br><span class="line">        assertNotInProgress();</span><br><span class="line">        <span class="comment">// 注册容器关闭事件监听器</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">this</span>.contextCloseListener);</span><br><span class="line">        <span class="keyword">this</span>.contexts.add(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addRuntimeShutdownHookIfNecessary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.shutdownHookAdded.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        addRuntimeShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际调用Runtime#addShutdownHook()方法添加钩子线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRuntimeShutdownHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">this</span>, <span class="string">&quot;SpringApplicationShutdownHook&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">        <span class="comment">// Not allowed in some environments</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 钩子线程最终执行的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;ConfigurableApplicationContext&gt; contexts;</span><br><span class="line">    Set&lt;ConfigurableApplicationContext&gt; closedContexts;</span><br><span class="line">    Set&lt;Runnable&gt; actions;</span><br><span class="line">    <span class="keyword">synchronized</span> (SpringApplicationShutdownHook.class) &#123;</span><br><span class="line">        <span class="keyword">this</span>.inProgress = <span class="keyword">true</span>;</span><br><span class="line">        contexts = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.contexts);</span><br><span class="line">        closedContexts = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.closedContexts);</span><br><span class="line">        actions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.handlers.getActions());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭容器并等待容器停止</span></span><br><span class="line">    contexts.forEach(<span class="keyword">this</span>::closeAndWait);</span><br><span class="line">    closedContexts.forEach(<span class="keyword">this</span>::closeAndWait);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行handlers中的action</span></span><br><span class="line">    actions.forEach(Runnable::run);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeAndWait</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!context.isActive()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭容器</span></span><br><span class="line">    context.close();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等待一段时间</span></span><br><span class="line">        <span class="keyword">int</span> waited = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (context.isActive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (waited &gt; TIMEOUT) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(SLEEP);</span><br><span class="line">            waited += SLEEP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        logger.warn(<span class="string">&quot;Interrupted waiting for application context &quot;</span> + context + <span class="string">&quot; to become inactive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TimeoutException ex) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Timed out waiting for application context &quot;</span> + context + <span class="string">&quot; to become inactive&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>容器关闭时，会调用<code>AbstractApplicationContext#close()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 容器关闭</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        doClose();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 移除shutdown hook</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.shutdownHook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().removeShutdownHook(<span class="keyword">this</span>.shutdownHook);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                <span class="comment">// ignore - VM is already shutting down</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际关闭容器的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check whether an actual close attempt is necessary...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.active.get() &amp;&amp; <span class="keyword">this</span>.closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 发布容器关闭事件，所有监听了该事件的监听器都会被通知，上面的SpringApplicationShutdownHook类就监听了该事件</span></span><br><span class="line">        publishEvent(<span class="keyword">new</span> ContextClosedEvent(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁BeanFactory中的单例bean，可以通过实现Disposable接口重写destroy方法，会在这里被调用</span></span><br><span class="line">        destroyBeans();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭BeanFactory</span></span><br><span class="line">        closeBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 留给子类实现</span></span><br><span class="line">        onClose();</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>流程展示</strong></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-22-SpringBoot%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/spring%E7%9A%84shutdown%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p><strong>可以看到，SpringBoot启动时会添加一个<code>SpringApplicationShutdownHook</code>对象，该类实现了Runnable接口，run方法中调用context.close来关闭容器，从而可以在JVM关闭前进行一些通知或清理工作</strong></p>
<hr>
<h4 id="何为优雅关闭"><a href="#何为优雅关闭" class="headerlink" title="何为优雅关闭"></a>何为优雅关闭</h4><blockquote>
<p>优雅关闭，就是指程序彻底停止前，当前正在处理的任务需要继续执行、服务器不再接受新的请求、应用从注册中心下线等</p>
</blockquote>
<hr>
<h4 id="如何优雅关闭Spring-Boot服务"><a href="#如何优雅关闭Spring-Boot服务" class="headerlink" title="如何优雅关闭Spring Boot服务"></a>如何优雅关闭Spring Boot服务</h4><blockquote>
<p>优雅关闭服务的关键在于我们需要找到一个缓冲点，这个缓冲点可以让我们在JVM关闭前执行一系列资源清理工作，根据上面的分析，可以知道SpringBoot给我们提供了两个缓冲点，一个是<strong>容器关闭事件监听</strong>，一个是<strong>实现<code>Disposable</code>接口重写<code>destroy()</code>方法</strong></p>
</blockquote>
<ol>
<li><p><span id="important">添加缓冲点</span></p>
<ul>
<li><p>监听Spring容器关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloseEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行资源清理工作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现Disposable接口或在方法上使用@PreDestroy注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisposableClass</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableClass#destroy&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreDestroyBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行PreDestroy()方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>关闭服务</p>
<ul>
<li><p>通过<code>System.exit()</code>直接退出</p>
</li>
<li><p>通过<code>AbstractApplicationContext#close</code>关闭服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/service&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutdownController</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/shutdown&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ((ConfigurableApplicationContext) context).close();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过<code>ApplicationPidFileWriter</code>将服务pid写入指定文件，使用脚本kill对应pid的进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(UserApplication.class);</span><br><span class="line">        application.addListeners(<span class="keyword">new</span> ApplicationPidFileWriter(<span class="string">&quot;/home/service/user-service.pid&quot;</span>));</span><br><span class="line">        application.run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /home/service/user-service.pid | xargs kill</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<h4 id="使用actuator实现优雅关闭"><a href="#使用actuator实现优雅关闭" class="headerlink" title="使用actuator实现优雅关闭"></a>使用actuator实现优雅关闭</h4><ul>
<li><strong>SpringBoot 2.3及以上版本</strong></li>
</ul>
<ol>
<li><p>添加缓冲点，参考<a href="#important">这里</a></p>
</li>
<li><p>引入actuator依赖，添加配置信息</p>
<ul>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">  <span class="comment"># 采用优雅停机方式，默认immediate立即停机</span></span><br><span class="line">  <span class="attr">shutdown:</span> <span class="string">graceful</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待超时时间</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">lifecycle:</span></span><br><span class="line">    <span class="attr">timeout-per-shutdown-phase:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露shutdown路径</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">shutdown</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>发送shutdown请求（使用POST方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:8090/actuator/shutdown</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>actuator工作原理</p>
<ul>
<li><p><code>ShutdownEndpoint</code>类暴露了一个<code>shutdown</code>端点，当请求该端点时，内部调用了<code>AbstractApplicationContext#close</code>方法关闭容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performShutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li><strong>SpringBoot 2.3版本以下（使用Tomcat容器）</strong></li>
</ul>
<ol>
<li><p>引入actuator依赖，添加配置信息</p>
<ul>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暴露shutdown路径</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">shutdown</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>创建优雅关闭配置类</p>
<ul>
<li><p>自定义<code>TomcatCustomizer</code>类实现<code>TomcatConnectorCustomizer</code>和<code>ApplicationListener</code>接口，获取Tomcat连接器和线程池，接收到容器关闭事件后关闭线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GracefulShutdownConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatCustomizer <span class="title">tomcatCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TomcatCustomizer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory serverFactory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        <span class="comment">// 将自定义的TomcatConnectorCustomizer添加到Tomcat容器中</span></span><br><span class="line">        serverFactory.addConnectorCustomizers(tomcatCustomizer());</span><br><span class="line">        <span class="keyword">return</span> serverFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatCustomizer</span> <span class="keyword">implements</span> <span class="title">TomcatConnectorCustomizer</span>, <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Connector connector;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.connector = connector;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != connector) &#123;</span><br><span class="line">                <span class="keyword">this</span>.connector.pause();</span><br><span class="line"></span><br><span class="line">                Executor executor = <span class="keyword">this</span>.connector.getProtocolHandler().getExecutor();</span><br><span class="line">                <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">                    ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executor;</span><br><span class="line">                    threadPoolExecutor.shutdown();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (threadPoolExecutor.awaitTermination(timeout, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;tomcat didn&#x27;t close gracefully in &#123;&#125; seconds, it turns to shutdown forcibly&quot;</span>, timeout);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><strong>注意：暴露shutdown端点存在风险，需要保证该端点不会被其他人随意调用</strong></p>
<hr>
<p><strong>总结：</strong></p>
<ul>
<li>JVM为我们提供了添加shutdown hook的方法，在JVM关闭前会执行这些hook线程</li>
<li>JVM在处理信号量通知的过程中使用了shutdown hook</li>
<li>SpringBoot提供了<code>SpringApplicationShutdownHook</code>（实现了Runnable接口）作为shutdown hook，run方法中调用<code>AbstractApplicationContext#close</code>方法关闭容器</li>
<li>容器关闭时会进行一系列资源销毁工作，如发布容器关闭事件、销毁Bean Factory中的bean、关闭Bean Factory、执行子类的onClose方法等</li>
<li>通过监听容器关闭事件或实现<code>DisposableBean</code>接口可以进行资源清理操作，如线程池的销毁、服务从注册中心下线、MQ消费等</li>
</ul>
<h4 id="上面只是简单描述了如何优雅关闭SpringBoot服务，实际在开发过程中还需要考虑到很多因素，如不同的注册中心、不同的rpc框架、服务部署方式等"><a href="#上面只是简单描述了如何优雅关闭SpringBoot服务，实际在开发过程中还需要考虑到很多因素，如不同的注册中心、不同的rpc框架、服务部署方式等" class="headerlink" title="上面只是简单描述了如何优雅关闭SpringBoot服务，实际在开发过程中还需要考虑到很多因素，如不同的注册中心、不同的rpc框架、服务部署方式等"></a>上面只是简单描述了如何优雅关闭SpringBoot服务，实际在开发过程中还需要考虑到很多因素，如不同的注册中心、不同的rpc框架、服务部署方式等</h4><p>道阻且长，行则将至。</p>
]]></content>
  </entry>
  <entry>
    <title>arthas诊断工具简单使用</title>
    <url>/2023/02/18/2022-01-30-arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>Arthas（阿尔萨斯）是什么</p>
</blockquote>
<p>Arthas是Alibaba开源的Java诊断工具</p>
<blockquote>
<p>Arthas能做什么</p>
</blockquote>
<ol>
<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>
<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况？</li>
<li>有什么办法可以监控到JVM的实时运行状态？</li>
<li>怎么快速定位应用的热点，生成火焰图？</li>
<li>怎样直接从JVM内查找某个类的实例？</li>
</ol>
<blockquote>
<p>开发中常见的问题</p>
</blockquote>
<ol>
<li><p>前端调用一个后端的接口，该接口逻辑非常复杂，可能会调用其他service接口或其他模块的FeignClient，但是在其中某个接口报错了，报错信息又不是很明显，这种情况下，一般要么分析代码逻辑，要么增加日志输出来排查发生异常的原因</p>
<p> 使用Arthas后，可以通过<code>watch</code>命令观察指定方法的调用情况，可以观察<code>入参</code>、<code>返回值</code>、<code>异常信息</code>、<code>本次调用的方法信息</code>、<code>本次调用的类信息</code>等，配合ognl表达式可以实现复杂的操作</p>
</li>
<li><p>后端改动或者增加一个复杂的接口后，联调时可能遇到一个问题，改一遍代码，然后pull代码，编译，重启服务，然后又遇到问题，再修改代码，再重复同样的操作，这些步骤十分的耗时，如果开发时间比较紧迫，更加让人难以忍受</p>
<p> 使用Arthas的<code>jad</code>、<code>mc</code>、<code>retransform</code>命令修改java代码，编译字节码文件，加载新的字节码，不需要重新pull代码，编译，重启等一系列耗时的操作，就能直接实现修改后的效果</p>
</li>
</ol>
<blockquote>
<p>如何使用</p>
</blockquote>
<ol>
<li><p>安装启动</p>
<p> 安装方式很多，有直接启动jar包、使用shell脚本、rpm安装等，这里使用直接启动jar包的方式</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载arthas-boot.jar</span></span><br><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure></li>
<li><p>选择要attach的进程</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[INFO] arthas-boot version: 3.5.4</span><br><span class="line">[INFO] Process 10294 already using port 3658</span><br><span class="line">[INFO] Process 10294 already using port 8563</span><br><span class="line">[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">* [1]: 10294 java-study-0.0.1-SNAPSHOT.jar</span><br><span class="line">  [2]: 13008 org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line">  [3]: 19681 /usr/nacos/target/nacos-server.jar</span><br><span class="line">  [4]: 4819 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">  [5]: 21381 /usr/my_service/java_study/java-study-0.0.1-SNAPSHOT.jar</span><br><span class="line">  [6]: 22535 kafka.Kafka</span><br><span class="line">  [7]: 21772 /usr/my_service/java_study/java-study-0.0.1-SNAPSHOT.jar</span><br><span class="line">1</span><br><span class="line">[INFO] arthas home: /root/.arthas/lib/3.5.4/arthas</span><br><span class="line">[INFO] The target process already listen port 3658, skip attach.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class="line"> /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;                          </span></span><br><span class="line"><span class="string">|  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |                         </span></span><br><span class="line"><span class="string">`--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span>                          </span><br><span class="line">                                                                                </span><br><span class="line"></span><br><span class="line">wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">version    3.5.4                                                                </span><br><span class="line">main_class                                                                      </span><br><span class="line">pid        10294                                                                </span><br><span class="line">time       2021-09-15 10:18:15</span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>help</code>查看命令帮助信息</p>
</li>
</ol>
<blockquote>
<p>使用<code>watch</code>命令观察方法的调用情况，如入参，返回值，异常信息等</p>
</blockquote>
<ol>
<li><p><code>watch</code>命令参数</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td><em>class-pattern</em></td>
<td>类名表达式匹配</td>
</tr>
<tr>
<td><em>method-pattern</em></td>
<td>方法名表达式匹配</td>
</tr>
<tr>
<td><em>express</em></td>
<td>观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code></td>
</tr>
<tr>
<td><em>condition-express</em></td>
<td>条件表达式</td>
</tr>
<tr>
<td>[b]</td>
<td>在<strong>方法调用之前</strong>观察</td>
</tr>
<tr>
<td>[e]</td>
<td>在<strong>方法异常之后</strong>观察</td>
</tr>
<tr>
<td>[s]</td>
<td>在<strong>方法返回之后</strong>观察</td>
</tr>
<tr>
<td>[f]</td>
<td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察</td>
</tr>
<tr>
<td>[E]</td>
<td>开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td>[x:]</td>
<td>指定输出结果的属性遍历深度，默认为 1</td>
</tr>
</tbody></table>
</li>
<li><p>观察表达式</p>
<p> 观察表达式的构成主要由ognl表达式组成，使用它可以获取对象的属性，调用对象的方法等</p>
<p> ognl表达式可以使用的对象有params(入参)、target(当前调用的类信息)、returnObj(返回值)、throwExp(异常信息)等，详细内容参考<a href="https://arthas.aliyun.com/doc/advice-class.html">表达式核心变量</a></p>
</li>
<li><p>测试代码</p>
<p> 根据id查询用户信息</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(id)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;用户id为空!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; collect = userList.stream().filter(u -&gt; id.equals(u.getId()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(collect)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;根据id未找到用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collect.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>观察方法调用情况</p>
<ul>
<li><p>观察方法入参和返回值</p>
<p>  执行watch命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;params, returnObj&#125; 表示需要观察方法入参和返回值，-n 5 表示执行5次后结束 -x 3 表示遍历对象的深度</span></span><br><span class="line">watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

<p>  调用接口：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/1</span><br></pre></td></tr></table></figure>

<p>  查看控制台输出：这里result中包含了入参和返回的对象</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 1) cost <span class="keyword">in</span> 71 ms, listenerId: 25</span><br><span class="line">method=com.codecho.test.service.UserServiceImpl.getUserById location=AtExit</span><br><span class="line">ts=2021-09-17 14:28:29; [cost=1.151249ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Long[1],</span><br><span class="line">    ],</span><br><span class="line">    @User[</span><br><span class="line">        id=@Long[1],</span><br><span class="line">        username=@String[1001],</span><br><span class="line">        avatar=@String[https://xxxx.com/1001.png],</span><br><span class="line">        phoneNumber=@String[10010010001],</span><br><span class="line">        age=@Integer[20],</span><br><span class="line">        gender=@String[男],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>观察方法抛出的异常信息</p>
<p>  执行watch命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;params, throwExp&#125; 表示需要观察方法入参和异常对象</span></span><br><span class="line">watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

<p>  调用接口：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/1001</span><br></pre></td></tr></table></figure>

<p>  查看控制台输出：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 1) cost <span class="keyword">in</span> 70 ms, listenerId: 26</span><br><span class="line">method=com.codecho.test.service.UserServiceImpl.getUserById location=AtExceptionExit</span><br><span class="line">ts=2021-09-17 14:29:56; [cost=2.055759ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Long[1001],</span><br><span class="line">    ],</span><br><span class="line">    java.lang.Exception: 根据id未找到用户信息</span><br><span class="line">	at com.codecho.test.service.UserServiceImpl.getUserById(UserServiceImpl.java:48)</span><br><span class="line">	at com.codecho.test.controller.TestController.getUserById(TestController.java:28)</span><br><span class="line">	at sun.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>  可以通过调整观察表达式只展示异常具体信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, throwExp.getMessage&#125;&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

<p>  重新调用接口，再次查看控制台输出</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, throwExp.getMessage&#125;&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 1) cost <span class="keyword">in</span> 71 ms, listenerId: 27</span><br><span class="line">method=com.codecho.test.service.UserServiceImpl.getUserById location=AtExceptionExit</span><br><span class="line">ts=2021-09-17 14:31:08; [cost=1.685761ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Long[1001],</span><br><span class="line">    ],</span><br><span class="line">    @String[根据id未找到用户信息],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>只观察满足条件的方法调用</p>
<p>  执行watch命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># params[0]%2==0 表示当用户id为偶数时才会记录调用信息</span></span><br><span class="line">watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class="string">&#x27;params[0]%2==0&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

<p>  调用接口：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/1</span><br><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/2</span><br><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/3</span><br><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/4</span><br></pre></td></tr></table></figure>

<p>  查看控制台输出：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch com.codecho.test.service.UserService getUserById <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class="string">&#x27;params[0]%2==0&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 1) cost <span class="keyword">in</span> 71 ms, listenerId: 28</span><br><span class="line">method=com.codecho.test.service.UserServiceImpl.getUserById location=AtExit</span><br><span class="line">ts=2021-09-17 14:32:06; [cost=0.067629ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Long[2],</span><br><span class="line">    ],</span><br><span class="line">    @User[</span><br><span class="line">        id=@Long[2],</span><br><span class="line">        username=@String[1002],</span><br><span class="line">        avatar=@String[https://xxxx.com/1002.png],</span><br><span class="line">        phoneNumber=@String[10010010002],</span><br><span class="line">        age=@Integer[23],</span><br><span class="line">        gender=@String[男],</span><br><span class="line">    ],</span><br><span class="line">]</span><br><span class="line">method=com.codecho.test.service.UserServiceImpl.getUserById location=AtExit</span><br><span class="line">ts=2021-09-17 14:32:11; [cost=0.081801ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Long[4],</span><br><span class="line">    ],</span><br><span class="line">    @User[</span><br><span class="line">        id=@Long[4],</span><br><span class="line">        username=@String[1004],</span><br><span class="line">        avatar=@String[https://xxxx.com/1004.png],</span><br><span class="line">        phoneNumber=@String[10010010004],</span><br><span class="line">        age=@Integer[21],</span><br><span class="line">        gender=@String[女],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>  执行watch命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #cost &gt; 5 表示耗时超过5ms才会记录调用信息 -v 表示打印条件表达式的值和结果</span></span><br><span class="line">watch com.codecho.test.service.UserService * <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class="string">&#x27;#cost &gt; 5&#x27;</span> -v -n 1 -x 3</span><br></pre></td></tr></table></figure>

<p>  调用接口：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8088/<span class="built_in">test</span>/user/1</span><br></pre></td></tr></table></figure>

<p>  查看控制台输出：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch com.codecho.test.service.UserService * <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class="string">&#x27;#cost &gt; 5&#x27;</span> -v -n 1 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 8) cost <span class="keyword">in</span> 76 ms, listenerId: 29</span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br><span class="line">Condition express: <span class="comment">#cost &gt; 5 , result: false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<blockquote>
<p>使用<code>trace</code>命令查看方法的调用路径和每个节点的耗时</p>
</blockquote>
<ol>
<li><p><code>trace</code>命令参数</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td><em>class-pattern</em></td>
<td>类名表达式匹配</td>
</tr>
<tr>
<td><em>method-pattern</em></td>
<td>方法名表达式匹配</td>
</tr>
<tr>
<td><em>condition-express</em></td>
<td>条件表达式</td>
</tr>
<tr>
<td>[E]</td>
<td>开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td>[n:]</td>
<td>命令执行次数</td>
</tr>
<tr>
<td>#cost</td>
<td>方法执行耗时</td>
</tr>
</tbody></table>
</li>
<li><p>观察接口调用路径</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@40528]$ trace *ActionInfoServiceImpl interactionAssist -n 2</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 2) cost <span class="keyword">in</span> 857 ms, listenerId: 4</span><br><span class="line">`---ts=2021-09-17 15:37:53;thread_name=http-nio-8325-exec-1;id=85;is_daemon=<span class="literal">true</span>;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@4258106</span><br><span class="line">    `---[26.143404ms] com.hand.interaction.base.actioninfo.service.ActionInfoServiceImpl$$EnhancerBySpringCGLIB$<span class="variable">$34d24eff</span>:interactionAssist() [throws Exception]</span><br><span class="line">        +---[25.926649ms] org.springframework.cglib.proxy.MethodInterceptor:intercept() [throws Exception]</span><br><span class="line">        |   `---[21.546574ms] com.hand.interaction.base.actioninfo.service.ActionInfoServiceImpl:interactionAssist() [throws Exception]</span><br><span class="line">        |       +---[0.131916ms] com.alibaba.fastjson.JSONObject:toJSONString() <span class="comment">#6957</span></span><br><span class="line">        |       +---[0.190136ms] org.apache.logging.log4j.Logger:info() <span class="comment">#6957</span></span><br><span class="line">        |       +---[0.00505ms] com.hand.core.util.UserUtil:getUser() <span class="comment">#6960</span></span><br><span class="line">        |       +---[0.00535ms] com.hand.interaction.base.actioninfo.model.ActionInfo:getInteractionId() <span class="comment">#6966</span></span><br><span class="line">        |       +---[1.262189ms] com.hand.interaction.base.interaction.service.InteractionService:queryByIdCache() <span class="comment">#6966</span></span><br><span class="line">        |       +---[0.00564ms] com.hand.interaction.base.interaction.model.Interaction:getEndTime() <span class="comment">#6970</span></span><br><span class="line">        |       +---[0.00526ms] com.hand.interaction.base.interaction.model.Interaction:getLicenseMode() <span class="comment">#6977</span></span><br><span class="line">        |       +---[0.010319ms] com.hand.interaction.base.actioninfo.service.ActionInfoServiceImpl:checkUserInfo() <span class="comment">#6977</span></span><br><span class="line">        |       +---[0.004508ms] com.hand.interaction.base.actioninfo.model.ActionInfo:getInteractionId() <span class="comment">#6980</span></span><br><span class="line">        |       +---[0.00497ms] com.hand.interaction.base.actioninfo.model.ActionInfo:getOpenId() <span class="comment">#6980</span></span><br><span class="line">        |       +---[0.006282ms] com.hand.interaction.base.actioninfo.model.ActionInfo:getMobilePhone() <span class="comment">#6980</span></span><br><span class="line">        |       +---[0.127087ms] com.hand.interaction.base.util.CommonUtils:tianYu() <span class="comment">#6980</span></span><br><span class="line">        |       +---[0.005831ms] com.hand.base.user.model.User:getOpenId() <span class="comment">#6982</span></span><br><span class="line">        |       +---[0.005991ms] com.hand.core.util.StringUtils:isBlank() <span class="comment">#6983</span></span><br><span class="line">        |       +---[0.009688ms] com.hand.interaction.base.interaction.model.Interaction:getBoostType() <span class="comment">#6988</span></span><br><span class="line">        |       +---[0.008306ms] com.hand.interaction.base.actioninfo.model.ActionInfo:getHpOpenid() <span class="comment">#6988</span></span><br><span class="line">        |       +---[0.004388ms] com.hand.core.util.StringUtils:isBlank() <span class="comment">#6989</span></span><br><span class="line">        |       +---[0.007474ms] com.hand.interaction.base.actioninfo.model.ActionInfo:setHpOpenid() <span class="comment">#6992</span></span><br><span class="line">        |       +---[min=0.003366ms,max=0.007244ms,total=0.01061ms,count=2] com.hand.interaction.base.interaction.model.Interaction:getInteractionFormat() <span class="comment">#6997</span></span><br><span class="line">        |       +---[0.005109ms] com.hand.interaction.base.interaction.model.Interaction:getShareMode() <span class="comment">#7026</span></span><br><span class="line">        |       +---[0.004529ms] com.hand.interaction.base.interaction.model.Interaction:getId() <span class="comment">#7028</span></span><br><span class="line">        |       +---[0.005249ms] com.hand.interaction.base.interaction.model.Interaction:getBoostType() <span class="comment">#7035</span></span><br><span class="line">        |       +---[19.019048ms] com.hand.interaction.base.actioninfo.service.ActionInfoServiceImpl:newMemBoostValidate() <span class="comment">#7050 [throws Exception]</span></span><br><span class="line">        |       `---throw:com.hand.core.basic.service.BasicServiceException <span class="comment">#7585 [您已经是会员，无法助力！]</span></span><br><span class="line">        `---throw:com.hand.core.basic.service.BasicServiceException <span class="comment">#49 [您已经是会员，无法助力！]</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>使用<code>jad</code>、<code>mc</code>、<code>retransform</code>命令热更新代码</p>
</blockquote>
<ol>
<li><p>测试代码</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payMoney</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 查找用户</span></span><br><span class="line">    User queryUser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getId())) &#123;</span><br><span class="line">        queryUser = getUserById(user.getId());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queryUser = getUserByUsername(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试调用普通方法</span></span><br><span class="line">    callPublicMethod(queryUser);</span><br><span class="line">    callPrivateMethod(queryUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付收款</span></span><br><span class="line">    payService.pay(queryUser, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;88.8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>jad</code>命令反编译要修改的类的字节码，并保存到指定目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jad --source-only *UserServiceImpl &gt; /usr/arthas/UserServiceImpl.java</span><br></pre></td></tr></table></figure></li>
<li><p>使用vim编辑反编译后的java代码，将金额从<strong>88.8</strong>改成<strong>99.9</strong></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payMoney</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 查找用户</span></span><br><span class="line">    User queryUser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getId())) &#123;</span><br><span class="line">        queryUser = getUserById(user.getId());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queryUser = getUserByUsername(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试调用普通方法</span></span><br><span class="line">    callPublicMethod(queryUser);</span><br><span class="line">    callPrivateMethod(queryUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付收款</span></span><br><span class="line">    payService.pay(queryUser, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;88.8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>mc</code>命令内存编译修改后的java代码，-d 指定输出class的目录</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mc /usr/arthas/UserServiceImpl.java -d /usr/arthas</span><br></pre></td></tr></table></figure>

<p> <strong>注意</strong>：<code>mc</code>命令是可能编译失败的，如果编译失败，可以在本地修改java代码后将编译后的class文件上传到服务器上再使用<code>mc</code>命令</p>
</li>
<li><p>使用<code>retransform</code>命令加载修改后的字节码文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">retransform /usr/arthas/UserServiceImpl.class</span><br></pre></td></tr></table></figure></li>
<li><p>使用watch命令观察接口入参，重新调用接口</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch *PayServiceImpl pay <span class="string">&#x27;&#123;params[0], params[1].toString&#125;&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type:application/json&quot;</span> -X POST -d <span class="string">&#x27;&#123;&quot;username&quot;: &quot;1002&quot;&#125;&#x27;</span> http://localhost:8088/<span class="built_in">test</span>/user/payMoney</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 99.9 元的收款</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch *PayServiceImpl pay <span class="string">&#x27;&#123;params[0], params[1].toString&#125;&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 48 ms, listenerId: 30</span><br><span class="line">method=com.codecho.test.service.PayServiceImpl.pay location=AtExit</span><br><span class="line">ts=2021-09-17 15:40:10; [cost=0.112135ms] result=@ArrayList[</span><br><span class="line">    @User[</span><br><span class="line">        id=@Long[2],</span><br><span class="line">        username=@String[1002],</span><br><span class="line">        avatar=@String[https://xxxx.com/1002.png],</span><br><span class="line">        phoneNumber=@String[10010010002],</span><br><span class="line">        age=@Integer[23],</span><br><span class="line">        gender=@String[男],</span><br><span class="line">    ],</span><br><span class="line">    @String[99.9],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>如果要取消<code>retransform</code>命令的效果，需要删除修改类的<code>retransform entry</code> 并重新触发<code>retransform</code>，如果不进行此操作，即使stop arthas后，<code>retransform</code>的效果仍会生效</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看retransform entry</span></span><br><span class="line">retransform -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的retransform entry</span></span><br><span class="line">retransform -d 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新触发retransform</span></span><br><span class="line">retransform --classPattern *UserServiceImpl</span><br></pre></td></tr></table></figure>

<p> 使用watch命令观察接口入参，重新调用接口</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch *PayServiceImpl pay <span class="string">&#x27;&#123;params[0], params[1].toString&#125;&#x27;</span> -n 5 -x 3</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type:application/json&quot;</span> -X POST -d <span class="string">&#x27;&#123;&quot;username&quot;: &quot;1002&quot;&#125;&#x27;</span> http://localhost:8088/<span class="built_in">test</span>/user/payMoney</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 99.9 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 99.9 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 99.9 元的收款</span><br><span class="line">测试调用普通public方法</span><br><span class="line">测试调用普通private方法</span><br><span class="line">用户 1002支付了一笔 88.8 元的收款</span><br></pre></td></tr></table></figure>

 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10294]$ watch *PayServiceImpl pay <span class="string">&#x27;&#123;params[0], params[1].toString&#125;&#x27;</span> -n 5 -x 3</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 48 ms, listenerId: 30</span><br><span class="line">method=com.codecho.test.service.PayServiceImpl.pay location=AtExit</span><br><span class="line">ts=2021-09-17 15:40:10; [cost=0.112135ms] result=@ArrayList[</span><br><span class="line">    @User[</span><br><span class="line">        id=@Long[2],</span><br><span class="line">        username=@String[1002],</span><br><span class="line">        avatar=@String[https://xxxx.com/1002.png],</span><br><span class="line">        phoneNumber=@String[10010010002],</span><br><span class="line">        age=@Integer[23],</span><br><span class="line">        gender=@String[男],</span><br><span class="line">    ],</span><br><span class="line">    @String[88.8],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p><code>quit</code>、<code>stop</code></p>
</blockquote>
<ol>
<li><p><code>quit</code></p>
<p> 退出当前arthas客户端，arthas服务端不会关闭，所做的修改不会重置</p>
</li>
<li><p><code>stop</code></p>
<p> 关闭arthas服务端，所有arthas客户端都会退出，关闭前增强类会被重置，使用<code>redefine</code>、<code>redefine</code>重加载的类不会被重置</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Dubbo使用Nacos作为注册中心无法连接</title>
    <url>/2023/06/26/2023-06-26-Dubbo%E4%BD%BF%E7%94%A8Nacos%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h4 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h4><ul>
<li>Dubbo 3.X</li>
<li>Nacos 2.X</li>
</ul>
<h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><blockquote>
<p>Failed to create nacos naming service client. Reason: server status check failed</p>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-06-26-Dubbo%E4%BD%BF%E7%94%A8Nacos%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/dubbo%E8%BF%9E%E6%8E%A5nacos%E6%8A%A5%E9%94%99.png"></p>
<h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><blockquote>
<p>Nacos2.X版本相比1.X新增了gRPC通信，因此添加了额外的端口，<a href="https://nacos.io/zh-cn/docs/v2/upgrading/2.0.0-compatibility.html">详见Nacos文档</a></p>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-06-26-Dubbo%E4%BD%BF%E7%94%A8Nacos%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/nacos2%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96.png"></p>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防火墙开放9848端口</span></span><br><span class="line">[root@localhost logs]<span class="comment"># firewall-cmd --add-port=9848/tcp --permanent </span></span><br><span class="line">success</span><br><span class="line">[root@localhost logs]<span class="comment"># firewall-cmd --reload </span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Spring配置多数据源并实现动态切换</title>
    <url>/2023/07/20/2023-07-20-Spring%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>在业务增长到一定数量后，我们的数据库会产生大量的数据，而随着数据量的增大，单表或单库的性能已经达到瓶颈，我们会对数据库进行读写分离、分库分表等优化，而Spring提供的多数据源及动态切换在这些场景就可以派上用场了。</p>
</blockquote>
<h4 id="介绍一下AbstractRoutingDataSource"><a href="#介绍一下AbstractRoutingDataSource" class="headerlink" title="介绍一下AbstractRoutingDataSource"></a>介绍一下AbstractRoutingDataSource</h4><ol>
<li><p><code>AbstractRoutingDataSource</code>是Spring中的一个抽象类，它的类继承关系如下，查看类注释信息：它是<code>DataSource</code>的抽象实现，根据查找key将<code>getConnection()</code>方法调用路由到多个目标数据源中的一个，后者通常是通过线程绑定的事务上下文确定的。</p>
<blockquote>
<p>Abstract DataSource implementation that routes getConnection() calls to one of various target DataSources based on a lookup key. The latter is usually (but not necessarily) determined through some thread-bound transaction context.</p>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-20-Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%2FAbstractRoutingDataSource%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png"></p>
</li>
<li><p><code>AbstractRoutingDataSource</code>的关键属性和方法</p>
<ul>
<li><p>afterPropertiesSet()：在Spring容器填充bean属性后调用，解析目标数据源集合和默认目标数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Object, DataSource&gt; resolvedDataSources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DataSource resolvedDefaultDataSource;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.targetDataSources == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;targetDataSources&#x27; is required&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对目标数据源集合和默认目标数据源进行解析，并填充到resolvedDataSources和resolvedDefaultDataSource属性</span></span><br><span class="line">    <span class="keyword">this</span>.resolvedDataSources = CollectionUtils.newHashMap(<span class="keyword">this</span>.targetDataSources.size());</span><br><span class="line">    <span class="keyword">this</span>.targetDataSources.forEach((key, value) -&gt; &#123;</span><br><span class="line">        Object lookupKey = resolveSpecifiedLookupKey(key);</span><br><span class="line">        DataSource dataSource = resolveSpecifiedDataSource(value);</span><br><span class="line">        <span class="keyword">this</span>.resolvedDataSources.put(lookupKey, dataSource);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultTargetDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.resolvedDefaultDataSource = resolveSpecifiedDataSource(<span class="keyword">this</span>.defaultTargetDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>getConnection()：获取数据库连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> determineTargetDataSource().getConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>determineTargetDataSource()：确定目标数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">&quot;DataSource router not initialized&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取查找key</span></span><br><span class="line">    Object lookupKey = determineCurrentLookupKey();</span><br><span class="line">    <span class="comment">// 根据查找key从已解析数据源集合中获取目标数据源</span></span><br><span class="line">    DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot determine target DataSource for lookup key [&quot;</span> + lookupKey + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>determineCurrentLookupKey()：确定当前查找key，不限类型，但是需要和<code>resolvedDataSources</code>中的key类型一致</p>
<p>==抽象方法，需要子类重写==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Object, DataSource&gt; resolvedDataSources;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ol>
<li><p>创建一个Spring Boot项目（只要是Spring项目就可以），引入MySQL驱动、MyBatis、druid、aop（使用aop切面编程实现数据源动态切换）等依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以不用druid-spring-boot-starter，因为我们需要自定义数据源，用不上自动配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建UserController、UserService、UserDao和UserMapper.xml（个人喜欢自己写SQL语句，也可以用MP等ORM框架），代码省略，只需要写一个查询接口就可以了</p>
</li>
<li><p>在两个数据库中添加两张结构一样的表，各添加一条数据，这里用nickname字段值不同代替主库和从库区别</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-20-Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%2F%E4%B8%BB%E5%BA%93%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png"></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-20-Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%2F%E4%BB%8E%E5%BA%93%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png"></p>
</li>
<li><p>创建application.yml或application.properties配置文件，添加数据库连接信息，这里如果用主从数据库连接更好，为了简化操作，这里我用两个不同的数据库代替主数据库和从数据库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ds_01:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password1</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://host1:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">  <span class="attr">ds_02:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password2</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://host2:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>DataSourceHolder</code>，使用<code>ThreadLocal</code>管理查找key，和线程绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; DATASOURCE_HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        DATASOURCE_HOLDER.set(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DATASOURCE_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DATASOURCE_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>DynamicDataSource</code>，继承<code>AbstractRoutingDataSource</code>，重写<code>determineCurrentLookupKey()</code>方法，通过<code>DataSourceHolder</code>获取查找key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>DataSourceEnum</code>保存数据源信息（可以直接用字符串代替）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DataSourceEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MASTER(<span class="string">&quot;master&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SLAVE(<span class="string">&quot;slave&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    DataSourceEnum(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>DataSourceConfig</code>，配置数据源（可配置任意多个），其中<code>dataSource01</code>为主库数据源，<code>dataSource02</code>为从库数据源（实际不是），<code>dynamicDataSource</code>为[步骤6]中自定义的数据源，并且是主数据源（使用<code>@Primary</code>注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUsername(environment.getProperty(<span class="string">&quot;spring.ds_01.username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(environment.getProperty(<span class="string">&quot;spring.ds_01.password&quot;</span>));</span><br><span class="line">        dataSource.setUrl(environment.getProperty(<span class="string">&quot;spring.ds_01.url&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUsername(environment.getProperty(<span class="string">&quot;spring.ds_02.username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(environment.getProperty(<span class="string">&quot;spring.ds_02.password&quot;</span>));</span><br><span class="line">        dataSource.setUrl(environment.getProperty(<span class="string">&quot;spring.ds_02.url&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dynamicDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 将主数据源和从数据源添加到目标数据源集合，设置默认目标数据源</span></span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSource = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        targetDataSource.put(DataSourceEnum.MASTER.getName(), dataSource01());</span><br><span class="line">        targetDataSource.put(DataSourceEnum.SLAVE.getName(), dataSource02());</span><br><span class="line">        </span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(dataSource01());</span><br><span class="line">        dynamicDataSource.setTargetDataSources(targetDataSource);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建自定义注解<code>SwitchDataSource</code>，控制使用哪个数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SwitchDataSource &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">DataSourceEnum <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> DataSourceEnum.MASTER</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>DynamicDataSourceAspect</code>切面，拦截带有<code>@SwitchDataSource</code>注解的方法，获取注解的name属性作为查找key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAspect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(switchDataSource)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, SwitchDataSource switchDataSource)</span> </span>&#123;</span><br><span class="line">        DataSourceEnum type = switchDataSource.type();</span><br><span class="line"></span><br><span class="line">        DataSourceHolder.set(type.getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DataSourceHolder.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在UserService的查找方法上添加自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SwitchDataSource(type = DataSourceEnum.SLAVE)</span></span><br><span class="line"><span class="comment">// @SwitchDataSource</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDO <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    UserDO user = userMapper.getById(id);</span><br><span class="line">	</span><br><span class="line">    ResponseEnum.USER_NOT_EXIST.assertNotNull(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对不使用注解、使用注解（不设置type）、使用注解（设置type为slave）三种情况进行测试，查看测试结果</p>
<ul>
<li><p>情况1、情况2</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-20-Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%2F%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-%E6%9F%A5%E8%AF%A21.png"></p>
</li>
<li><p>情况3</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-20-Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%2F%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-%E6%9F%A5%E8%AF%A22.png"></p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>至此，我们就完成了Spring多数据源配置和动态切换了，关于多数据源的事务问题会在后面的篇章中探究。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>如何减小Spring Boot项目jar包体积</title>
    <url>/2023/05/22/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/</url>
    <content><![CDATA[<blockquote>
<p>相信大部分Java开发者在使用SpringBoot开发项目时，经常会遇到代码频繁改动，每次打包部署到开发/测试环境时，由于jar包体积过大，上传jar包消耗了大量的时间，下面介绍如何给SpringBoot项目jar包减肥（使用maven作为打包工具）</p>
</blockquote>
<p><strong>注：Spring Boot版本：2.5.7、JDK版本：jdk8</strong></p>
<h4 id="jar包体积"><a href="#jar包体积" class="headerlink" title="jar包体积"></a>jar包体积</h4><p><em>可以看到，一个普通的Spring Boot项目，其生成的jar包体积就高达几十近百兆</em></p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/springboot%E7%9A%84jar%E5%8C%85%E4%BD%93%E7%A7%AF.png"></p>
<hr>
<h4 id="jar包结构"><a href="#jar包结构" class="headerlink" title="jar包结构"></a>jar包结构</h4><p><em>解压生成的jar包，查看其目录结构</em></p>
<ul>
<li><p>BOOT-INF</p>
<ul>
<li>classes    <strong>业务代码</strong></li>
<li>lib            <strong>项目依赖</strong></li>
</ul>
</li>
<li><p>META-INF</p>
<ul>
<li>maven    <strong>maven配置信息</strong></li>
<li>MANIFEST.MF    <strong>jar包的描述信息和属性</strong></li>
<li>spring-configuration-metadata.json    <strong>配置提示信息，使用IDE编写配置文件会有提示</strong></li>
</ul>
</li>
<li><p>org</p>
<ul>
<li>springframework    <strong>启动jar包需要的class</strong></li>
</ul>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/springboot%E7%9A%84jar%E5%8C%85%E7%BB%93%E6%9E%84.png"></p>
</li>
</ul>
<hr>
<h4 id="修改maven打包配置"><a href="#修改maven打包配置" class="headerlink" title="修改maven打包配置"></a>修改maven打包配置</h4><ul>
<li><p>修改项目pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用maven重新打包，可以发现现在的jar包体积比原来要小很多</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/%E9%85%8D%E7%BD%AEmaven%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E4%B9%8B%E5%90%8Ejar%E5%8C%85%E4%BD%93%E7%A7%AF.png"></p>
</li>
</ul>
<hr>
<h4 id="准备jar包运行需要的依赖"><a href="#准备jar包运行需要的依赖" class="headerlink" title="准备jar包运行需要的依赖"></a>准备jar包运行需要的依赖</h4><ul>
<li><p>不修改maven打包配置，生成带有<code>lib</code>目录的jar包，然后解压将<code>lib</code>目录单独提取出来</p>
</li>
<li><p>修改maven打包配置，将依赖copy到指定目录</p>
<p>在plugins标签中添加下面内容，如果<code>maven-dependency-plugin</code>找不到，可以先引入该依赖，然后删除该依赖配置，以后每次打包后在target目录下会生成一个<code>lib</code>依赖目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="运行瘦身后的jar包（仅限JDK8版本）"><a href="#运行瘦身后的jar包（仅限JDK8版本）" class="headerlink" title="运行瘦身后的jar包（仅限JDK8版本）"></a>运行瘦身后的jar包（仅限JDK8版本）</h4><ul>
<li><p>通过指定<code>loader.path</code>参数指定依赖目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dloader.path=./lib -jar user-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/%E8%BF%90%E8%A1%8C%E7%98%A6%E8%BA%AB%E5%90%8E%E7%9A%84jar%E5%8C%85.png"></p>
</li>
<li><p>通过指定<code>java.ext.dirs</code>参数，注意不能覆盖原有的依赖（<code>$JAVA_HOME/jre/lib/ext）</code>，可以通过<code>:</code>添加多个依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.ext.dirs=<span class="variable">$JAVA_HOME</span>/jre/lib/ext:./lib -jar user-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-05-21-%E5%87%8F%E5%B0%8FSpringBoot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E4%BD%93%E7%A7%AF/%E8%BF%90%E8%A1%8C%E7%98%A6%E8%BA%AB%E5%90%8E%E7%9A%84jar%E5%8C%852.png"></p>
<p><strong>==注意：==</strong><code>java.ext.dirs</code>参数在JDK8以上版本好像不支持</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ShardingSphere-JDBC入门使用</title>
    <url>/2023/08/12/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="什么是ShardingSphere？"><a href="#什么是ShardingSphere？" class="headerlink" title="什么是ShardingSphere？"></a>什么是ShardingSphere？</h4><blockquote>
<p>Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。 它主要由ShardingSphere-JDBC和ShardingSphere-Proxy两个可独立使用、也可混合使用的产品组成。</p>
<p><a href="https://shardingsphere.apache.org/document/current/cn/overview/#%E4%BB%80%E4%B9%88%E6%98%AF-shardingsphere">官网</a></p>
</blockquote>
<h4 id="什么是ShardingSphere-Proxy？"><a href="#什么是ShardingSphere-Proxy？" class="headerlink" title="什么是ShardingSphere-Proxy？"></a>什么是ShardingSphere-Proxy？</h4><blockquote>
<p>ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。 目前提供 MySQL 和 PostgreSQL 协议，透明化数据库操作，对 DBA 更加友好。</p>
<ul>
<li>向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；</li>
<li>兼容 MariaDB 等基于 MySQL 协议的数据库，以及 openGauss 等基于 PostgreSQL 协议的数据库；</li>
<li>适用于任何兼容 MySQL/PostgreSQL 协议的的客户端，如：MySQL Command Client, MySQL Workbench, Navicat 等。</li>
</ul>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-proxy.png"></p>
<h4 id="什么是ShardingSphere-JDBC？"><a href="#什么是ShardingSphere-JDBC？" class="headerlink" title="什么是ShardingSphere-JDBC？"></a>什么是ShardingSphere-JDBC？</h4><blockquote>
<p>ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p>
<ul>
<li>适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；</li>
<li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；</li>
<li>支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。</li>
</ul>
</blockquote>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-jdbc.png"></p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li><p>创建Spring Boot项目，引入MySQL、ShardingSphere-JDBC等依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建若干张表，根据表创建controller、service、dao等代码</p>
</li>
</ol>
<h4 id="使用ShardingSphere-JDBC进行读写分离"><a href="#使用ShardingSphere-JDBC进行读写分离" class="headerlink" title="使用ShardingSphere-JDBC进行读写分离"></a>使用ShardingSphere-JDBC进行读写分离</h4><ol>
<li><p>数据库：master、slave；表：t_user</p>
</li>
<li><p>创建<code>application.properties</code>作为基础配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用读写分离配置文件</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">separate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath*:**/sql/*.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打印sql日志</span></span><br><span class="line"><span class="meta">spring.shardingsphere.props.sql-show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>application-separate.properties</code>作为读写分离配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源名称</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">master,slave</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据源1（主数据源）</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.master.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.master.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.master.url</span>=<span class="string">jdbc:mysql://host1:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.master.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.master.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据源2（从数据源）</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.slave.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.slave.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.slave.url</span>=<span class="string">jdbc:mysql://host2:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.slave.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.slave.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># spring.shardingsphere.rules.readwrite-splitting.data-sources.&lt;readwrite-splitting-data-source-name&gt;.type=Static</span></span><br><span class="line"><span class="comment"># 读写分离类型，如: Static，Dynamic</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.type</span>=<span class="string">Static</span></span><br><span class="line"><span class="comment"># 写数据源名称</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.props.write-data-source-name</span>=<span class="string">master</span></span><br><span class="line"><span class="comment"># 读数据源名称，多个从数据源用逗号分隔</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.props.read-data-source-names</span>=<span class="string">slave</span></span><br><span class="line"><span class="comment"># 负载均衡算法名称</span></span><br><span class="line"><span class="comment"># 自定义轮询算法名称</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.load-balancer-name</span>=<span class="string">round_alg</span></span><br><span class="line"><span class="comment"># 自定义随机算法名称</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.load-balancer-name=random_alg</span></span><br><span class="line"><span class="comment"># 自定义权重算法名称</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.rules.readwrite-splitting.data-sources.my_ds.load-balancer-name=weight_alg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># spring.shardingsphere.rules.readwrite-splitting.load-balancers.&lt;load-balance-algorithm-name&gt;.type= # ????????</span></span><br><span class="line"><span class="comment"># 负载均衡算法类型</span></span><br><span class="line"><span class="comment"># 使用轮询算法</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.readwrite-splitting.load-balancers.round_alg.type</span>=<span class="string">ROUND_ROBIN</span></span><br><span class="line"><span class="comment"># 负载均衡算法属性配置</span></span><br><span class="line"><span class="comment"># 权重算法配置</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.rules.readwrite-splitting.load-balancers.weight_alg.props.slave1=1</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.rules.readwrite-splitting.load-balancers.weight_alg.props.slave2=2</span></span><br></pre></td></tr></table></figure></li>
<li><p>分别测试查询和插入接口，查看数据源是否正常路由</p>
<ul>
<li><p>查询sql路由到从数据源</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-jdbc%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB1.png"></p>
</li>
<li><p>写入sql路由到主数据源</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-jdbc%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB2.png"></p>
</li>
</ul>
</li>
</ol>
<h4 id="使用ShardingSphere-JDBC进行分库分表"><a href="#使用ShardingSphere-JDBC进行分库分表" class="headerlink" title="使用ShardingSphere-JDBC进行分库分表"></a>使用ShardingSphere-JDBC进行分库分表</h4><ol>
<li><p>数据库：ds_0、ds_1；表：t_order_0/1(ds_0/1)、t_order_item_0/1(ds_0/1)</p>
</li>
<li><p>创建<code>application.properties</code>作为基础配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">horizontal</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath*:**/sql/*.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打印sql日志</span></span><br><span class="line"><span class="meta">spring.shardingsphere.props.sql-show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>application-horizontal.properties</code>作为读写分离配置文件</p>
<p><em><strong>分库分表策略：</strong></em></p>
<p><strong>分库</strong>：订单表根据id对2取模，结果为0，路由到<code>ds_0</code>数据库；结果为1，路由到<code>ds_1</code>数据库。订单明细表根据<code>order_id</code>对2取模，结果为0，路由到<code>ds_0</code>数据库；结果为1，路由到<code>ds_1</code>数据库，即和订单表保持一致</p>
<p><strong>分表</strong>：订单表、订单明细表根据<code>user_id</code>对2取模，结果为0，路由到<code>t_order_0</code>、<code>t_order_item_0</code>；结果为1，路由到<code>t_order_1</code>、<code>t_order_item_1</code>表</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源名称</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">ds_0,ds_1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据源1</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_0.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_0.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_0.url</span>=<span class="string">jdbc:mysql://host1:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_0.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_0.password</span>=<span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_1.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_1.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_1.url</span>=<span class="string">jdbc:mysql://host2:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds_1.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据节点，由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="string">ds_$-&gt;&#123;[0,1]&#125;.t_order_$-&gt;&#123;0..1&#125;</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes</span>=<span class="string">ds_$-&gt;&#123;[0,1]&#125;.t_order_item_$-&gt;&#123;0..1&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分库策略</span></span><br><span class="line"><span class="comment"># 订单表根据id对2取模，路由到ds_0或ds_1数据库</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column</span>=<span class="string">id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_inline_id</span></span><br><span class="line"><span class="comment"># 订单明细表根据order_id对2取模，路由到ds_0或ds_1数据库，和订单表保持一致</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column</span>=<span class="string">order_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_inline_order_id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分表策略</span></span><br><span class="line"><span class="comment"># 订单表根据user_id对2取模，路由到t_order_0或t_order_1表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column</span>=<span class="string">user_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_mod_id</span></span><br><span class="line"><span class="comment"># 订单明细表根据user_id对2取模，路由到t_order_item_0或t_order_item_1表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column</span>=<span class="string">user_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_mod_id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分片算法</span></span><br><span class="line"><span class="comment"># 订单表，行表达式分片算法</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_id.type</span>=<span class="string">INLINE</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_id.props.algorithm-expression</span>=<span class="string">ds_$-&gt;&#123;id % 2&#125;</span></span><br><span class="line"><span class="comment"># 订单表、订单明细表，取模分片算法</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod_id.type</span>=<span class="string">MOD</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod_id.props.sharding-count</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># 订单明细表，行表达式分片算法</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_order_id.type</span>=<span class="string">INLINE</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_order_id.props.algorithm-expression</span>=<span class="string">ds_$-&gt;&#123;order_id % 2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 绑定表：分片规则一致的一组分片表。使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率</span></span><br><span class="line"><span class="meta">spring.shardingsphere.rules.sharding.binding-tables[0]</span>=<span class="string">t_order,t_order_item</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写插入订单和订单行的代码，查看分库分表策略是否生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mockInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OrderDO order1 = <span class="keyword">new</span> OrderDO().setId(snowflake.nextId())</span><br><span class="line">        .setOrderNo(snowflake.nextIdStr())</span><br><span class="line">        .setUserId(<span class="number">202001L</span>)</span><br><span class="line">        .setCreateTime(<span class="string">&quot;2023-08-12 17:35:11&quot;</span>)</span><br><span class="line">        .setCreateTime(<span class="string">&quot;2023-08-12 17:35:11&quot;</span>)</span><br><span class="line">        .setPayAmount(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;10889.0&quot;</span>));</span><br><span class="line">    OrderItemDO orderItem1 = <span class="keyword">new</span> OrderItemDO().setId(snowflake.nextId())</span><br><span class="line">        .setOrderId(order1.getId())</span><br><span class="line">        .setUserId(<span class="number">202001L</span>)</span><br><span class="line">        .setProductName(<span class="string">&quot;MacBook Pro&quot;</span>)</span><br><span class="line">        .setAmount(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;10889.0&quot;</span>));</span><br><span class="line"></span><br><span class="line">    orderMapper.insert(order1);</span><br><span class="line">    orderItemService.insert(orderItem1);</span><br><span class="line"></span><br><span class="line">    OrderDO order2 = <span class="keyword">new</span> OrderDO().setId(snowflake.nextId())</span><br><span class="line">        .setOrderNo(snowflake.nextIdStr())</span><br><span class="line">        .setUserId(<span class="number">202000L</span>)</span><br><span class="line">        .setCreateTime(<span class="string">&quot;2023-08-12 17:41:54&quot;</span>)</span><br><span class="line">        .setCreateTime(<span class="string">&quot;2023-08-12 17:41:54&quot;</span>)</span><br><span class="line">        .setPayAmount(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;3899.0&quot;</span>));</span><br><span class="line">    OrderItemDO orderItem2 = <span class="keyword">new</span> OrderItemDO()</span><br><span class="line">        .setId(snowflake.nextId())</span><br><span class="line">        .setOrderId(order2.getId())</span><br><span class="line">        .setUserId(<span class="number">202000L</span>)</span><br><span class="line">        .setProductName(<span class="string">&quot;iWatch S8&quot;</span>)</span><br><span class="line">        .setAmount(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;3899.0&quot;</span>));</span><br><span class="line"></span><br><span class="line">    orderMapper.insert(order2);</span><br><span class="line">    orderItemService.insert(orderItem2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看分库分表情况</p>
<ul>
<li><p><code>order_id</code>为偶数、<code>user_id</code>为奇数</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-jdbc%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A81.png"></p>
</li>
<li><p>order_id为偶数、user_id为偶数</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-08-07-ShardingSphere-JDBC%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2Fshardingsphere-jdbc%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A82.png"></p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Redisson分布式锁入门使用及源码浅析</title>
    <url>/2023/09/05/2023-09-05-Redisson%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>作为JAVA开发者，一提到锁，我们第一时间想到的应该是synchronized关键字、ReentrantLock和juc包下的各种并发工具类。随着业务的增长和微服务的流行，系统由单体应用拆分为独立的模块，每个模块服务都运行在独立的JVM中，此时JDK提供的锁就显得力不从心了，于是分布式锁这样一把利器就应运而生了。</p>
</blockquote>
<h3 id="分布式锁的特性"><a href="#分布式锁的特性" class="headerlink" title="分布式锁的特性"></a>分布式锁的特性</h3><ul>
<li><p>互斥</p>
<p>同一时刻只能有一个客户端持有</p>
</li>
<li><p>可重入</p>
<p>同一个客户端获取到锁后可以再次加锁</p>
</li>
<li><p>避免死锁</p>
<p>通过设置过期时间或其他方式保证即使客户端崩溃也不会影响锁的释放</p>
</li>
<li><p>加锁解锁同一人</p>
<p>每个客户端只能释放自己加的锁</p>
</li>
<li><p>容错</p>
<p>允许若干个锁节点发生故障仍能正常加锁和解锁</p>
</li>
</ul>
<h3 id="分布式锁实现方式"><a href="#分布式锁实现方式" class="headerlink" title="分布式锁实现方式"></a>分布式锁实现方式</h3><ul>
<li><p>数据库</p>
<p>select xxx for update</p>
</li>
<li><p>zookeeper</p>
<p>临时顺序节点</p>
</li>
<li><p>redis</p>
<p>setnx、lua脚本</p>
</li>
</ul>
<h3 id="使用Redis作为分布式锁"><a href="#使用Redis作为分布式锁" class="headerlink" title="使用Redis作为分布式锁"></a>使用Redis作为分布式锁</h3><h4 id="伪代码实现"><a href="#伪代码实现" class="headerlink" title="伪代码实现"></a>伪代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成分布式锁的key，使用业务id代替</span></span><br><span class="line">lockKey = <span class="string">&quot;lock:&quot;</span> + bizId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用setnx命令进行加锁，setnx即set if not exist，不存在则设置</span></span><br><span class="line">result = redis.setnx(lockKey, value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 加锁成功，设置过期时间</span></span><br><span class="line">	redis.expire(key, <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 执行业务操作</span></span><br><span class="line">    doSomething();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    redis.del(lockKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><ol>
<li>加锁和设置过期时间不是原子操作，如果加锁成功但设置过期时间失败，则锁会一直存在</li>
<li>锁的过期时间是固定的，如果设置过小，业务耗时较久，锁会提前释放，被其他线程获取，造成业务混乱和异常；如果设置过大，业务操作发生异常，造成锁长时间无法释放且无法获取</li>
<li>可能存在误释放其他线程的锁，线程1加锁并设置过期时间成功，但是由于业务耗时较久，锁已经过期，所以线程2能够获取到锁并执行业务操作，此时线程1执行完业务后释放了本该属于线程2的锁，然后线程3又获取到了锁……很明显，这种情况页会造成业务的混乱和异常</li>
</ol>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><ol>
<li><p>Redis的set命令提供了nx和ex、px参数，相当于将setnx + expire合并为一个操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ex 过期时间单位为秒</span><br><span class="line">// px 过期时间单位为毫秒</span><br><span class="line">set key value nx ex|px time</span><br></pre></td></tr></table></figure></li>
<li><p>通过类似TimerTask之类的定时工具类来对锁进行自动续期（Redisson中的看门狗机制），每隔一段时间进行检查，如果锁存在，重新设置过期时间保证业务能够正常完成</p>
</li>
<li><p>线程加锁时将线程id作为value存入Redis，解锁时判断锁中的value是否和当前线程id一致，一致则删除锁</p>
<p>伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">threadId = Threads.currentThread().getId();</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (threadId == redis.get(lockKey)) &#123;</span><br><span class="line">	redis.del(lockKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里仍然存在几个问题：</strong></p>
<ul>
<li>上述删除锁一共三个操作，获取锁的value、判断value和线程id是否相等、删除锁，如果线程1在执行完前两步操作后锁刚好过期，此时线程2成功获取到锁，然后执行业务操作，接着线程1执行删除操作，就会释放掉线程2的锁。因此需要上述操作为原子性操作，可以使用lua脚本将三个操作合在一起执行</li>
<li>在不同的JVM中，线程id是会重复的，因此不能只使用线程id作为锁的value，可以使用UUID或分布式ID（如使用雪花算法生成的id）</li>
</ul>
</li>
</ol>
<p>到这里，我们设计的分布式锁才算勉强满足我们的需求。</p>
<h3 id="Redis部署方式带来的问题"><a href="#Redis部署方式带来的问题" class="headerlink" title="Redis部署方式带来的问题"></a>Redis部署方式带来的问题</h3><ol>
<li>上述的分布式锁在Redis单节点环境下是能够正常使用的，但是单节点部署注定无法提供高可用性</li>
<li>Redis除了单节点部署外，还支持主从（哨兵）、分片集群两种部署方式，而这两种方式都是需要进行主从同步的，如果某个master节点在客户端获取锁后下线，而slave节点又未及时同步锁数据，经过选举后slave节点成为新的master节点，但是客户端锁数据已经丢失，其他客户端可以正常获取锁，这样会造成程序和业务上的混乱</li>
<li>为了解决上述问题，Redis作者提出了一种算法来保证即使在主从（哨兵）、分片集群环境下也能保证分布式锁的正常使用</li>
</ol>
<h3 id="Redlock算法"><a href="#Redlock算法" class="headerlink" title="Redlock算法"></a>Redlock算法</h3><p>简单概括来说，将上述的操作在每个master节点上分别执行，如果在容忍时间内，至少有一半以上的master节点能够加锁成功，则认为分布式锁获取成功</p>
<p><a href="https://redis.io/docs/manual/patterns/distributed-locks/">详情查看官网</a></p>
<h3 id="Redisson分布式锁简单使用"><a href="#Redisson分布式锁简单使用" class="headerlink" title="Redisson分布式锁简单使用"></a>Redisson分布式锁简单使用</h3><blockquote>
<p>Redisson是一个方便我们连接和使用Redis的客户端，它提供了很多常用功能，其中就包括分布式锁。Redisson分布式锁支持单实例、主从、哨兵、分片集群等部署模式，详见<a href="https://github.com/redisson/redisson/wiki/2.-Configuration">wiki</a></p>
</blockquote>
<ol>
<li><p>创建SpringBoot Web项目，引入redisson依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在application.properties配置文件中添加redis连接信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">xxx.xxx.xxx.xxx</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写Redisson配置类，创建RedissonClient对象实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        <span class="comment">// 这里使用单实例模式</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port).setPassword(password);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/lottery&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/draw&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(<span class="string">&quot;prize:1001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!lock.tryLock()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;===&gt; &#123;&#125; didn&#x27;t get lock&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;离大奖只差一步，别灰心，下次还有机会！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            log.info(<span class="string">&quot;===&gt; &#123;&#125; got lock&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;===&gt; &#123;&#125; unlock&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你就是天选之子！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Jmeter工具模拟并发请求</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-04-Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%2Fjmeter%E6%A8%A1%E6%8B%9F%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.png"></p>
</li>
<li><p>查看Redis中分布式锁信息</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-04-Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%2Fredisson%E9%94%81%E7%BB%93%E6%9E%84.png"></p>
</li>
<li><p>查看控制台日志</p>
<p><img src="https://myblog-1256052415.cos.ap-shanghai.myqcloud.com/2023-07-04-Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%2Fredisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%97%A5%E5%BF%97.png"></p>
</li>
</ol>
<blockquote>
<p>可以看到，在并发场景下，Redisson分布式锁可以保证同一时刻只有一个线程能够获取锁，可以满足我们的业务需求。</p>
</blockquote>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><em><strong>加锁源码</strong></em></p>
<ul>
<li><p>tryLock()：==带过期时间参数的tryLock()和lock()方法逻辑和以下类似，多了重试和订阅/取消订阅channel的操作==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(tryLockAsync());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockAsync(Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryAcquireOnceAsync(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span>, threadId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>tryAcquireOnceAsync()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RFuture&lt;Boolean&gt; <span class="title">tryAcquireOnceAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    RFuture&lt;Boolean&gt; ttlRemainingFuture; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果自己设置了锁租借时间</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有设置锁租借时间，默认为30s</span></span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,</span><br><span class="line">                                               TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining) &#123;</span><br><span class="line">            <span class="comment">// 设置自定义锁租借时间</span></span><br><span class="line">            <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 未设置，开启锁续期定时任务（看门狗）</span></span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>tryLockInnerAsync()：==加锁核心逻辑==</p>
<p><span id="param"><strong>解释一下lua脚本中的参数</strong></span></p>
<ul>
<li>KEYS[1]    prize:1001   锁对应的key，即 Collections.singletonList(getRawName())</li>
<li>ARGV[1]   30000        锁过期时间，未设置则默认为30000</li>
<li>ARGV[2]   d5f6-xxxxx:107   锁的field，即 getLockName(threadId)，格式为 uuid:threadId</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加锁逻辑：</span></span><br><span class="line"><span class="comment">// 1.如果redis中不存在名为 prize:1001 的key，创建key为 prize:1001 的hash，并将field为 d5f646f3-c3ea-47d7-89fb-199d561f4084:107 的value值加一，最后设置过期时间，返回nil，表示加锁成功</span></span><br><span class="line"><span class="comment">// 2.如果存在并且该key存在指定的field ，将field对应的value值加一并设置过期时间，返回nil，表示加锁成功</span></span><br><span class="line"><span class="comment">// 3.如果key存在但不存在指定的field，返回锁的剩余过期时间，表示加锁失败</span></span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>续约源码</strong></em></p>
<ul>
<li><p>scheduleExpirationRenewal()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要设置过期续约的锁的集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ExpirationEntry&gt; EXPIRATION_RENEWAL_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">scheduleExpirationRenewal</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    ExpirationEntry entry = <span class="keyword">new</span> ExpirationEntry();</span><br><span class="line">    <span class="comment">// 如果当前锁第一次设置过期续约，向EXPIRATION_RENEWAL_MAP中添加一个续约信息；如果不是第一次设置，返回已有的续约信息</span></span><br><span class="line">    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">    <span class="comment">// 如果不是第一次设置过期续约，将当前线程id添加到原续约信息的线程id集合中</span></span><br><span class="line">    <span class="keyword">if</span> (oldEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        oldEntry.addThreadId(threadId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果第一次设置，将当前线程id添加到刚创建的续约信息的线程id集合中</span></span><br><span class="line">        entry.addThreadId(threadId);</span><br><span class="line">        <span class="comment">// 开启锁过期续约定时任务，即看门狗任务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            renewExpiration();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 如果检测到线程中断，取消续期</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                cancelExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>renewExpiration()：==看门狗核心逻辑==</p>
<p>Timeout是netty工具包下的一个关于定时任务的接口，它可以设置定时任务和定时信息</p>
<p>TimerTask同上，它是定时任务的抽象接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁续约信息，不存在则返回</span></span><br><span class="line">    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建定时任务，周期为 internalLockLeaseTime/3 ，未设置锁租借时间，默认为 10s</span></span><br><span class="line">    <span class="comment">// Config.java: private long lockWatchdogTimeout = 30 * 1000;</span></span><br><span class="line">    Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 获取锁续约信息（线程id+过期时间）</span></span><br><span class="line">            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取第一个添加的线程id</span></span><br><span class="line">            Long threadId = ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 执行锁续期lua脚本</span></span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="comment">// 续期失败，删除续约信息</span></span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getRawName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                    EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">			   <span class="comment">// 续期成功后自己调用自己，即重复创建并执行看门狗任务</span></span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">// reschedule itself</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 续期失败后取消续期</span></span><br><span class="line">                    cancelExpirationRenewal(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>renewExpirationAsync()：==锁续期核心逻辑==</p>
<p>lua脚本参数参考<a href="#param">这里</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 续期逻辑：</span></span><br><span class="line"><span class="comment">// 1.判断锁中指定的field是否存在，如果存在，使用pexpire指令重新设置过期时间（单位毫秒），返回1，表示续期成功</span></span><br><span class="line"><span class="comment">// 2.如果指定的field不存在，返回0，表示续期失败</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">renewExpirationAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getRawName()),</span><br><span class="line">                          internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>cancelExpirationRenewal()：取消续约</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cancelExpirationRenewal</span><span class="params">(Long threadId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取续约信息</span></span><br><span class="line">    ExpirationEntry task = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 若线程id存在，则从续约信息的线程id集合中移除</span></span><br><span class="line">    <span class="keyword">if</span> (threadId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        task.removeThreadId(threadId);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 如果线程id不存在或者续约信息中无线程id，取消定时任务和其关联，从过期续约集合中移除该续约信息</span></span><br><span class="line">    <span class="keyword">if</span> (threadId == <span class="keyword">null</span> || task.hasNoThreads()) &#123;</span><br><span class="line">        Timeout timeout = task.getTimeout();</span><br><span class="line">        <span class="keyword">if</span> (timeout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeout.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>解锁源码</strong></em></p>
<ul>
<li><p>unlock()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        get(unlockAsync(Thread.currentThread().getId()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RedisException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> IllegalMonitorStateException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IllegalMonitorStateException) e.getCause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>unlockAsync()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Void&gt; <span class="title">unlockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    RPromise&lt;Void&gt; result = <span class="keyword">new</span> RedissonPromise&lt;&gt;();</span><br><span class="line">    <span class="comment">// 实际解锁操作</span></span><br><span class="line">    RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"></span><br><span class="line">    future.onComplete((opStatus, e) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 解锁完成后取消续约，这部分逻辑参考之前的解锁源码部分</span></span><br><span class="line">        cancelExpirationRenewal(threadId);</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.tryFailure(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (opStatus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            IllegalMonitorStateException cause = <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span></span><br><span class="line">                                                                                  + id + <span class="string">&quot; thread-id: &quot;</span> + threadId);</span><br><span class="line">            result.tryFailure(cause);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.trySuccess(<span class="keyword">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>unlockInnerAsync()：==解锁核心逻辑==</p>
<p><strong>解释一下lua脚本中的参数</strong></p>
<ul>
<li>KEYS[1]    prize:1001   锁对应的key，即 getRawName()</li>
<li>KEYS[2]    redisson_lock__channel:{prize:1001}    锁的channel</li>
<li>ARGV[1]   0                  锁的channel发布的信息</li>
<li>ARGV[2]   30000         锁过期时间</li>
<li>ARGV[3]   d5f6-xxxxx:107    锁的field，即 getLockName(threadId)，格式为 uuid:threadId</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解锁逻辑：</span></span><br><span class="line"><span class="comment">// 1.如果redis中不存在指定的key和field，返回nil，表示解锁成功（锁已经不存在了）</span></span><br><span class="line"><span class="comment">// 2.如果存在，将field对应的value值减一，如果减一后的value值大于0，使用pexpire指令重新设置过期时间（单位毫秒），即重入次数减一，返回0</span></span><br><span class="line"><span class="comment">// 3.如果减一后的value值小于或等于0，删除指定的key，发布解锁信息到指定的channel，订阅了该channel并设置了监听事件的客户端会执行回调和释放信号量，唤醒等待的线程重新获取锁（这部分内容下次我会详细写一篇文章进行分析），返回1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">                          Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    从零开始使用Redis作为分布式锁会遇到各种各样的问题，通过一步步的分析，我们慢慢摸索到了分布式锁的雏形，而Redlock算法就是为了解决这些问题而提出的。但是它仍然不是完美的，比如过渡依赖时钟、网络、设计过重等，具体可以网上搜索Redis作者<strong>Antirez</strong>和分布式系统专家<strong>Martin</strong>的论战。在实际使用时，应该根据我们的业务场景和需求来决定采用何种解决方案。</p>
]]></content>
  </entry>
</search>
